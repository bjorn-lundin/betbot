-----------------------------------------------------
-- This file is AUTOGENERATED by
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at
--9.6-10510
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!-----
-----------DO NOT EDIT THIS FILE!!!!----------------
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Sql, Simple_List_Class;

package Table_Drymarketsf is

  use Sattmate_Types, Sattmate_Calendar;

  type Data_Type is record
      Marketid :    Integer_4  := 0 ; -- Primary Key
      Bspmarket :    String (1..1) := (others => ' ') ; --
      Markettype :    String (1..1) := (others => ' ') ; --
      Eventhierarchy :    String (1..50) := (others => ' ') ; -- non unique index 2
      Lastrefresh :    Time_Type  := Time_Type_First ; --
      Turninginplay :    String (1..1) := (others => ' ') ; --
      Menupath :    String (1..100) := (others => ' ') ; --
      Betdelay :    Integer_4  := 0 ; --
      Exchangeid :    Integer_4  := 0 ; --
      Countrycode :    String (1..3) := (others => ' ') ; --
      Marketname :    String (1..50) := (others => ' ') ; -- non unique index 3
      Marketstatus :   String (1 .. 15) := (others => ' ') ; --
      Eventdate :    Time_Type  := Time_Type_First ; -- non unique index 4
      Noofrunners :    Integer_4  := 0 ; --
      Totalmatched :    Integer_4  := 0 ; --
      Noofwinners :    Integer_4  := 0 ; --
  end record;
  Empty_Data : Table_Drymarketsf.Data_Type;
  --
  -- Table name as string
  --
  Table_Drymarketsf_Name : constant String := "DRYMARKETSF";
  Table_Drymarketsf_Set_Name : constant String := "DRYMARKETSF_SET";
  Table_Drymarketsf_Row_Name : constant String := "DRYMARKETSF_ROW";
  --
  -- Column names as strings
  --
  Marketid_Name : constant String := "MARKETID";
  Bspmarket_Name : constant String := "BSPMARKET";
  Markettype_Name : constant String := "MARKETTYPE";
  Eventhierarchy_Name : constant String := "EVENTHIERARCHY";
  Lastrefresh_Name : constant String := "LASTREFRESH";
  Turninginplay_Name : constant String := "TURNINGINPLAY";
  Menupath_Name : constant String := "MENUPATH";
  Betdelay_Name : constant String := "BETDELAY";
  Exchangeid_Name : constant String := "EXCHANGEID";
  Countrycode_Name : constant String := "COUNTRYCODE";
  Marketname_Name : constant String := "MARKETNAME";
  Marketstatus_Name : constant String := "MARKETSTATUS";
  Eventdate_Name : constant String := "EVENTDATE";
  Noofrunners_Name : constant String := "NOOFRUNNERS";
  Totalmatched_Name : constant String := "TOTALMATCHED";
  Noofwinners_Name : constant String := "NOOFWINNERS";
  --
  -- Column names as enumerator literals
  --
  type Column_Type is (
        Marketid,
        Bspmarket,
        Markettype,
        Eventhierarchy,
        Lastrefresh,
        Turninginplay,
        Menupath,
        Betdelay,
        Exchangeid,
        Countrycode,
        Marketname,
        Marketstatus,
        Eventdate,
        Noofrunners,
        Totalmatched,
        Noofwinners);

  package Drymarketsf_List_Pack is new Simple_List_Class(Table_Drymarketsf.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Drymarketsf.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_Drymarketsf.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Marketid : Integer_4) return Boolean;
  --------------------------------------------
  function Get(Marketid : Integer_4) return Table_Drymarketsf.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Drymarketsf_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out Drymarketsf_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_Drymarketsf.Data_Type);
  --------------------------------------------
  procedure Update(Data : in out Table_Drymarketsf.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Insert(Data : in out Table_Drymarketsf.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  -- Index

  procedure Read_Eventdate(Data  : in     Table_Drymarketsf.Data_Type;
                       List  : in out Drymarketsf_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventdate(Data       : in out Table_Drymarketsf.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventdate(Data : Table_Drymarketsf.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventdate(Data  : in     Table_Drymarketsf.Data_Type);
  --------------------------------------------

  -- Index

  procedure Read_Eventhierarchy(Data  : in     Table_Drymarketsf.Data_Type;
                       List  : in out Drymarketsf_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventhierarchy(Data       : in out Table_Drymarketsf.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventhierarchy(Data : Table_Drymarketsf.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventhierarchy(Data  : in     Table_Drymarketsf.Data_Type);
  --------------------------------------------

  -- Index

  procedure Read_Marketname(Data  : in     Table_Drymarketsf.Data_Type;
                       List  : in out Drymarketsf_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Marketname(Data       : in out Table_Drymarketsf.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Marketname(Data : Table_Drymarketsf.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Marketname(Data  : in     Table_Drymarketsf.Data_Type);
  --------------------------------------------


  -- Procedures for DBMS UD4

  --------------------------------------------




  -- Procedures for all DBMS

  function To_String(Data : in Table_Drymarketsf.Data_Type) return String;



end Table_Drymarketsf ;
