
-----------------------------------------------------
-- This file is AUTOGENERATED by
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at
--9.6-10510
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!-----
-----------DO NOT EDIT THIS FILE!!!!----------------
-----------------------------------------------------




pragma Warnings(Off);
with  General_Routines, Text_Io;
with Ada.Strings.Fixed;


package body Table_Dryrunnersf is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  -- Primary key, if several fields
  Stm_Select_I1_Marketid_O,
  Stm_Select_I1_Marketid,
  Stm_Delete_I1_Marketid : Sql.Statement_Type;


  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Dryrunnersf.Data_Type is
    Data : Table_Dryrunnersf.Data_Type;
  begin
    if not Sql.Is_Null(Stm, "MARKETID") then
      Sql.Get(Stm, "MARKETID", Data.Marketid);
    else
      Data.Marketid := 0;
    end if;
    if not Sql.Is_Null(Stm, "SELECTIONID") then
      Sql.Get(Stm, "SELECTIONID", Data.Selectionid);
    else
      Data.Selectionid := 0;
    end if;
    if not Sql.Is_Null(Stm, "INDEX") then
      Sql.Get(Stm, "INDEX", Data.Index);
    else
      Data.Index := 0;
    end if;
    if not Sql.Is_Null(Stm, "BACKPRICE") then
      Sql.Get(Stm, "BACKPRICE", Data.Backprice);
    else
      Data.Backprice := 0.0;
    end if;
    if not Sql.Is_Null(Stm, "LAYPRICE") then
      Sql.Get(Stm, "LAYPRICE", Data.Layprice);
    else
      Data.Layprice := 0.0;
    end if;
    if not Sql.Is_Null(Stm, "RUNNERNAME") then
      Sql.Get(Stm, "RUNNERNAME", Data.Runnername);
    else
      Data.Runnername := (others => ' ');
    end if;
  return Data;
  end Get;
---------------------------------------------

  function Get(Marketid : Integer_4;
                       Selectionid : Integer_4) return Table_Dryrunnersf.Data_Type is
    Data       : Table_Dryrunnersf.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Data.Selectionid := Selectionid;
    Read(Data, End_Of_Set);
    return Data;
  end Get;
--------------------------------------------

  procedure Read_All(List  : in out Dryrunnersf_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_All_O, "select * from DRYRUNNERSF order by MARKETID, SELECTIONID");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Sql.Prepare(Stm_Select_All, "select * from DRYRUNNERSF");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_All;
--------------------------------------------


  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Dryrunnersf_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Count       : Integer_4 := 0;
    Data        : Table_Dryrunnersf.Data_Type;
    Eos         : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Open_Cursor(Stm);
    loop
      Sql.Fetch(Stm, Eos);
      exit when Eos or Count > Max;
      Data := Get(Stm);
      Dryrunnersf_List_Pack.Insert_At_Tail(List, Data);
      Count := Count +1;
    end loop;
    Sql.Close_Cursor(Stm);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_List;
--------------------------------------------

  function Is_Existing(Marketid : Integer_4;
                       Selectionid : Integer_4) return Boolean is
    Data       : Table_Dryrunnersf.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Data.Selectionid := Selectionid;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;
--------------------------------------------

  procedure Read(Data       : in out Table_Dryrunnersf.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select, " select * from DRYRUNNERSF " &
            "where MARKETID=:MARKETID" &
            " and SELECTIONID=:SELECTIONID" ) ;
    Sql.Set(Stm_Select, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Select, "SELECTIONID", Data.Selectionid);

    Sql.Open_Cursor(Stm_Select);
    Sql.Fetch(Stm_Select, End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Sql.Close_Cursor(Stm_Select);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read;
---------------------------------------------

  procedure Delete(Data : in Table_Dryrunnersf.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete, " delete from DRYRUNNERSF " &
            "where MARKETID=:MARKETID" &
            " and SELECTIONID=:SELECTIONID" ) ;
    Sql.Set(Stm_Delete, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Delete, "SELECTIONID", Data.Selectionid);

    Sql.Execute(Stm_Delete);
  end Delete;
--------------------------------------------

  procedure Update(Data : in out Table_Dryrunnersf.Data_Type; Keep_Timestamp : in Boolean := False) is

  begin
    Sql.Prepare(Stm_Update, "update DRYRUNNERSF set " &
            "INDEX=:INDEX," &
            "BACKPRICE=:BACKPRICE," &
            "LAYPRICE=:LAYPRICE," &
            "RUNNERNAME=:RUNNERNAME " &
            "where MARKETID=:MARKETID " &
            "and SELECTIONID=:SELECTIONID " ) ;
    Sql.Set(Stm_Update, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Update, "SELECTIONID",Data.Selectionid);
    if Data.Index = 0 then
      Sql.Set_Null(Stm_Update, "INDEX");
    else
      Sql.Set(Stm_Update, "INDEX",Data.Index);
    end if;
    Sql.Set(Stm_Update, "BACKPRICE",Data.Backprice);
    Sql.Set(Stm_Update, "LAYPRICE",Data.Layprice);
    Sql.Set(Stm_Update, "RUNNERNAME",Data.Runnername);

    Sql.Execute(Stm_Update);
  end Update;
--------------------------------------------

  procedure Insert(Data : in out Table_Dryrunnersf.Data_Type; Keep_Timestamp : in Boolean := False) is

  begin
    if not Keep_Timestamp then
      null; --for tables without IXX*
    end if;
    Sql.Prepare(Stm_Insert, "insert into DRYRUNNERSF values (" &
            ":MARKETID, " &
            ":SELECTIONID, " &
            ":INDEX, " &
            ":BACKPRICE, " &
            ":LAYPRICE, " &
            ":RUNNERNAME) " ) ;
    Sql.Set(Stm_Insert, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Insert, "SELECTIONID",Data.Selectionid);
    if Data.Index = 0 then
      Sql.Set_Null(Stm_Insert, "INDEX");
    else
      Sql.Set(Stm_Insert, "INDEX",Data.Index);
    end if;
    Sql.Set(Stm_Insert, "BACKPRICE",Data.Backprice);
    Sql.Set(Stm_Insert, "LAYPRICE",Data.Layprice);
    Sql.Set(Stm_Insert, "RUNNERNAME",Data.Runnername);

    Sql.Execute(Stm_Insert);
  end Insert;
--------------------------------------------

  -- Primary key, when several fields

  procedure Read_I1_Marketid(Data  : in     Table_Dryrunnersf.Data_Type;
                       List  : in out Dryrunnersf_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if (Start_Trans) then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_I1_Marketid_O, " select * from DRYRUNNERSF " &
            "where MARKETID=:MARKETID" &
            " order by MARKETID, SELECTIONID");
      Sql.Set(Stm_Select_I1_Marketid_O, "MARKETID", Data.Marketid);

      Read_List(Stm_Select_I1_Marketid_O, List, Max);
    else
      Sql.Prepare(Stm_Select_I1_Marketid, " select * from DRYRUNNERSF " &
            "where MARKETID=:MARKETID" ) ;
      Sql.Set(Stm_Select_I1_Marketid, "MARKETID", Data.Marketid);

      Read_List(Stm_Select_I1_Marketid, List, Max);
    end if;
    if (Start_Trans) then Sql.Commit(Transaction); end if;
  end Read_I1_Marketid;
  --------------------------------------------

  procedure Delete_I1_Marketid(Data  : in     Table_Dryrunnersf.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_I1_Marketid, " delete from DRYRUNNERSF " &
            "where MARKETID=:MARKETID" ) ;
      Sql.Set(Stm_Delete_I1_Marketid, "MARKETID", Data.Marketid);

    Sql.Execute(Stm_Delete_I1_Marketid);
  end Delete_I1_Marketid;
  --------------------------------------------

  function Is_Existing_I1(
                 Marketid     : in Integer_4 )     return Boolean is
    Data       : Table_Dryrunnersf.Data_Type;
    End_Of_Set : Boolean := False;
    Is_Exist   : Boolean := False;
    List       : Dryrunnersf_List_Pack.List_Type := Dryrunnersf_List_Pack.Create;
  begin
    Data.Marketid := Marketid ;
    Read_I1_Marketid(Data, List, False, 1);
    Is_Exist := not Dryrunnersf_List_Pack.Is_Empty(List);
    Dryrunnersf_List_Pack.Release(List);
    return Is_Exist;
  end Is_Existing_I1 ;
  --------------------------------------------





  -- Procedures for all DBMS


  function Date_To_String(Date : in Sattmate_Calendar.Time_Type) return String is
    package Integer_2_Io is new Text_Io.Integer_Io(Integer_2);
    Date_String : String(1..10) := "yyyy-mm-dd";
  begin
    Integer_2_Io.Put(Date_String(9..10), Date.Day);
    Integer_2_Io.Put(Date_String(6..7), Date.Month);
    Integer_2_Io.Put(Date_String(1..4), Date.Year);
    if Date_String(9) = ' ' then Date_String(9) := '0'; end if;
    if Date_String(6) = ' ' then Date_String(6) := '0'; end if;
    return Date_String;
  end Date_To_String;
--------------------------------------------



  function To_String(Data : in Table_Dryrunnersf.Data_Type) return String is
  begin
    return
          " Marketid = " & Integer_4'Image(Data.Marketid) &
          " Selectionid = " & Integer_4'Image(Data.Selectionid) &
          " Index = " & Integer_4'Image(Data.Index) &
          " Backprice = " &  General_Routines.F8_To_String(Data.Backprice) &
          " Layprice = " &  General_Routines.F8_To_String(Data.Layprice) &
          " Runnername = " & General_Routines.Skip_Trailing_Blanks(Data.Runnername) &
          "";
  end To_String;
--------------------------------------------


end Table_Dryrunnersf ;

