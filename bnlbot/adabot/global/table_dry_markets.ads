-----------------------------------------------------
-- This file is AUTOGENERATED by
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at
--9.6-10510
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!-----
-----------DO NOT EDIT THIS FILE!!!!----------------
-----------------------------------------------------



pragma Warnings (Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar,  Sql, Simple_List_Class;

package Table_Dry_Markets is

   use Sattmate_Types, Sattmate_Calendar;

   type Data_Type is record
      Market_Id  :    Integer_4  := 0 ; -- Primary Key
      Bsp_Market :    String (1 .. 1) := (others => ' ') ; --
      Market_Type :    String (1 .. 1) := (others => ' ') ; --
      Event_Hierarchy :    String (1 .. 50) := (others => ' ') ; -- non unique index 2
      Last_Refresh :    Time_Type  := Time_Type_First ; --
      Turning_In_Play :    String (1 .. 1) := (others => ' ') ; --
      Menu_Path  :    String (1 .. 100) := (others => ' ') ; --
      Bet_Delay  :    Integer_4  := 0 ; --
      Exchange_Id :    Integer_4  := 0 ; --
      Country_Code :    String (1 .. 3) := (others => ' ') ; --
      Market_Name :    String (1 .. 50) := (others => ' ') ; -- non unique index 3
      Market_Status :   String (1 .. 15) := (others => ' ') ; --
      Event_Date :    Time_Type  := Time_Type_First ; -- non unique index 4
      No_Of_Runners :    Integer_4  := 0 ; --
      Total_Matched :    Integer_4  := 0 ; --
      No_Of_Winners :    Integer_4  := 0 ; --
   end record;
   Empty_Data : Table_Dry_Markets.Data_Type;
   --
   -- Table name as string
   --
   Table_Dry_Markets_Name : constant String := "DRY_MARKETS";
   Table_Dry_Markets_Set_Name : constant String := "DRY_MARKETS_SET";
   Table_Dry_Markets_Row_Name : constant String := "DRY_MARKETS_ROW";
   --
   -- Column names as strings
   --
   Market_Id_Name : constant String := "MARKET_ID";
   Bsp_Market_Name : constant String := "BSP_MARKET";
   Market_Type_Name : constant String := "MARKET_TYPE";
   Event_Hierarchy_Name : constant String := "EVENT_HIERARCHY";
   Last_Refresh_Name : constant String := "LAST_REFRESH";
   Turning_In_Play_Name : constant String := "TURNING_IN_PLAY";
   Menu_Path_Name : constant String := "MENU_PATH";
   Bet_Delay_Name : constant String := "BET_DELAY";
   Exchange_Id_Name : constant String := "EXCHANGE_ID";
   Country_Code_Name : constant String := "COUNTRY_CODE";
   Market_Name_Name : constant String := "MARKET_NAME";
   Market_Status_Name : constant String := "MARKET_STATUS";
   Event_Date_Name : constant String := "EVENT_DATE";
   No_Of_Runners_Name : constant String := "NO_OF_RUNNERS";
   Total_Matched_Name : constant String := "TOTAL_MATCHED";
   No_Of_Winners_Name : constant String := "NO_OF_WINNERS";
   --
   -- Column names as enumerator literals
   --
   type Column_Type is (
                        Market_Id,
                        Bsp_Market,
                        Market_Type,
                        Event_Hierarchy,
                        Last_Refresh,
                        Turning_In_Play,
                        Menu_Path,
                        Bet_Delay,
                        Exchange_Id,
                        Country_Code,
                        Market_Name,
                        Market_Status,
                        Event_Date,
                        No_Of_Runners,
                        Total_Matched,
                        No_Of_Winners);

   package Dry_Markets_List_Pack is new Simple_List_Class (Table_Dry_Markets.Data_Type);

   -- Procedures for DBMS DEF
   -- Primary key
   function Get (Stm : in Sql.Statement_Type) return Table_Dry_Markets.Data_Type;
   --------------------------------------------
   procedure Read (Data       : in out Table_Dry_Markets.Data_Type;
                   End_Of_Set : in out Boolean);
   --------------------------------------------
   function Is_Existing (Market_Id : Integer_4) return Boolean;
   --------------------------------------------
   function Get (Market_Id : Integer_4) return Table_Dry_Markets.Data_Type;
   --------------------------------------------

   procedure Read_List (Stm  : in     Sql.Statement_Type;
                        List : in out Dry_Markets_List_Pack.List_Type;
                        Max  : in     Integer_4 := Integer_4'Last);
   --------------------------------------------
   procedure Read_All (List  : in out Dry_Markets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
   --------------------------------------------
   procedure Delete (Data : in Table_Dry_Markets.Data_Type);
   --------------------------------------------
   procedure Update (Data : in out Table_Dry_Markets.Data_Type; Keep_Timestamp : in Boolean := False);
   --------------------------------------------
   procedure Insert (Data : in out Table_Dry_Markets.Data_Type; Keep_Timestamp : in Boolean := False);
   --------------------------------------------
   -- Primary keys, when several fields

   -- Index

   procedure Read_Event_Date (Data  : in     Table_Dry_Markets.Data_Type;
                              List  : in out Dry_Markets_List_Pack.List_Type;
                              Order : in     Boolean := False;
                              Max   : in     Integer_4 := Integer_4'Last);
   --------------------------------------------

   procedure Read_One_Event_Date (Data       : in out Table_Dry_Markets.Data_Type;
                                  Order      : in     Boolean := False;
                                  End_Of_Set : in out Boolean);
   --------------------------------------------

   function Count_Event_Date (Data : Table_Dry_Markets.Data_Type) return Integer_4;
   --------------------------------------------


   procedure Delete_Event_Date (Data  : in     Table_Dry_Markets.Data_Type);
   --------------------------------------------

   -- Index

   procedure Read_Event_Hierarchy (Data  : in     Table_Dry_Markets.Data_Type;
                                   List  : in out Dry_Markets_List_Pack.List_Type;
                                   Order : in     Boolean := False;
                                   Max   : in     Integer_4 := Integer_4'Last);
   --------------------------------------------

   procedure Read_One_Event_Hierarchy (Data       : in out Table_Dry_Markets.Data_Type;
                                       Order      : in     Boolean := False;
                                       End_Of_Set : in out Boolean);
   --------------------------------------------

   function Count_Event_Hierarchy (Data : Table_Dry_Markets.Data_Type) return Integer_4;
   --------------------------------------------


   procedure Delete_Event_Hierarchy (Data  : in     Table_Dry_Markets.Data_Type);
   --------------------------------------------

   -- Index

   procedure Read_Market_Name (Data  : in     Table_Dry_Markets.Data_Type;
                               List  : in out Dry_Markets_List_Pack.List_Type;
                               Order : in     Boolean := False;
                               Max   : in     Integer_4 := Integer_4'Last);
   --------------------------------------------

   procedure Read_One_Market_Name (Data       : in out Table_Dry_Markets.Data_Type;
                                   Order      : in     Boolean := False;
                                   End_Of_Set : in out Boolean);
   --------------------------------------------

   function Count_Market_Name (Data : Table_Dry_Markets.Data_Type) return Integer_4;
   --------------------------------------------


   procedure Delete_Market_Name (Data  : in     Table_Dry_Markets.Data_Type);
   --------------------------------------------





   -- Procedures for all DBMS

   function To_String (Data : in Table_Dry_Markets.Data_Type) return String;



end Table_Dry_Markets ;
