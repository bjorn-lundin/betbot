
-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------




pragma Warnings(Off);
with Process_Io, General_Routines, Text_Io, Standard8, Cgi;
with Ada.Strings.Fixed;
with Sax.Readers;              use Sax.Readers;
with Input_Sources.File;       use Input_Sources.File;
with Unicode.CES;
with Unicode.Encodings;
with Sax.Attributes;

package body Table_Dryresultsf is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  -- Primary key, if several fields
  Stm_Select_I1_Marketid_O,
  Stm_Select_I1_Marketid,
  Stm_Delete_I1_Marketid : Sql.Statement_Type; 


  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Dryresultsf.Data_Type is
    Data : Table_Dryresultsf.Data_Type;
  begin
    if not Sql.Is_Null(Stm, "MARKETID") then
      Sql.Get(Stm, "MARKETID", Data.Marketid);
    else
      Data.Marketid := 0;
    end if;
    if not Sql.Is_Null(Stm, "SELECTIONID") then
      Sql.Get(Stm, "SELECTIONID", Data.Selectionid);
    else
      Data.Selectionid := 0;
    end if;
  return Data;
  end Get;
---------------------------------------------

  function Get(Marketid : Integer_4;
                       Selectionid : Integer_4) return Table_Dryresultsf.Data_Type is
    Data       : Table_Dryresultsf.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Data.Selectionid := Selectionid;
    Read(Data, End_Of_Set);
    return Data;
  end Get;
--------------------------------------------

  procedure Read_All(List  : in out Dryresultsf_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_All_O, "select * from DRYRESULTSF order by MARKETID, SELECTIONID");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Sql.Prepare(Stm_Select_All, "select * from DRYRESULTSF");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_All;
--------------------------------------------


  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Dryresultsf_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Count       : Integer_4 := 0;
    Data        : Table_Dryresultsf.Data_Type;
    Eos         : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Open_Cursor(Stm);
    loop
      Sql.Fetch(Stm, Eos); 
      exit when Eos or Count > Max;
      Data := Get(Stm);
      Dryresultsf_List_Pack.Insert_At_Tail(List, Data);
      Count := Count +1;
    end loop;
    Sql.Close_Cursor(Stm);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_List;
--------------------------------------------

  function Is_Existing(Marketid : Integer_4;
                       Selectionid : Integer_4) return Boolean is
    Data       : Table_Dryresultsf.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Data.Selectionid := Selectionid;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;
--------------------------------------------

  procedure Read(Data       : in out Table_Dryresultsf.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select, " select * from DRYRESULTSF " & 
            "where MARKETID=:MARKETID" &
            " and SELECTIONID=:SELECTIONID" ) ;
    Sql.Set(Stm_Select, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Select, "SELECTIONID", Data.Selectionid);

    Sql.Open_Cursor(Stm_Select);
    Sql.Fetch(Stm_Select, End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Sql.Close_Cursor(Stm_Select);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read;
---------------------------------------------

  procedure Delete(Data : in Table_Dryresultsf.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete, " delete from DRYRESULTSF " & 
            "where MARKETID=:MARKETID" &
            " and SELECTIONID=:SELECTIONID" ) ;
    Sql.Set(Stm_Delete, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Delete, "SELECTIONID", Data.Selectionid);

    Sql.Execute(Stm_Delete);
  end Delete;
--------------------------------------------

  procedure Insert(Data : in out Table_Dryresultsf.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    if not Keep_Timestamp then
      null; --for tables without IXX*
    end if;
    Sql.Prepare(Stm_Insert, "insert into DRYRESULTSF values (" &
            ":MARKETID, " &
            ":SELECTIONID) " ) ;
    Sql.Set(Stm_Insert, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Insert, "SELECTIONID",Data.Selectionid);

    Sql.Execute(Stm_Insert);
  end Insert;
--------------------------------------------

  -- Primary key, when several fields

  procedure Read_I1_Marketid(Data  : in     Table_Dryresultsf.Data_Type;
                       List  : in out Dryresultsf_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if (Start_Trans) then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_I1_Marketid_O, " select * from DRYRESULTSF " & 
            "where MARKETID=:MARKETID" &
            " order by MARKETID, SELECTIONID"); 
      Sql.Set(Stm_Select_I1_Marketid_O, "MARKETID", Data.Marketid);
 
      Read_List(Stm_Select_I1_Marketid_O, List, Max);
    else
      Sql.Prepare(Stm_Select_I1_Marketid, " select * from DRYRESULTSF " & 
            "where MARKETID=:MARKETID" ) ; 
      Sql.Set(Stm_Select_I1_Marketid, "MARKETID", Data.Marketid);
 
      Read_List(Stm_Select_I1_Marketid, List, Max);
    end if;
    if (Start_Trans) then Sql.Commit(Transaction); end if;
  end Read_I1_Marketid;
  --------------------------------------------

  procedure Delete_I1_Marketid(Data  : in     Table_Dryresultsf.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_I1_Marketid, " delete from DRYRESULTSF " & 
            "where MARKETID=:MARKETID" ) ; 
      Sql.Set(Stm_Delete_I1_Marketid, "MARKETID", Data.Marketid);
 
    Sql.Execute(Stm_Delete_I1_Marketid);
  end Delete_I1_Marketid;
  --------------------------------------------

  function Is_Existing_I1(
                 Marketid     : in Integer_4 )     return Boolean is
    Data       : Table_Dryresultsf.Data_Type;
    End_Of_Set : Boolean := False;
    Is_Exist   : Boolean := False;
    List       : Dryresultsf_List_Pack.List_Type := Dryresultsf_List_Pack.Create;
  begin
    Data.Marketid := Marketid ; 
    Read_I1_Marketid(Data, List, False, 1);
    Is_Exist := not Dryresultsf_List_Pack.Is_Empty(List);
    Dryresultsf_List_Pack.Release(List);
    return Is_Exist;
  end Is_Existing_I1 ;
  --------------------------------------------


  procedure Get_Values(Request : in     Request_Type;
                       Data    : in out Table_Dryresultsf.Data_Type) is
  begin
    if Has_Value(Request, "MARKETID") then
      Get_Value(Request, "MARKETID", Data.Marketid);
    end if;
    if Has_Value(Request, "SELECTIONID") then
      Get_Value(Request, "SELECTIONID", Data.Selectionid);
    end if;
  end Get_Values;
--------------------------------------------


  procedure Set_Values(Reply  : in out Request_Type;
                       Data   : in     Table_Dryresultsf.Data_Type) is
  begin
    Set_Value(Reply, "MARKETID", Data.Marketid);
    Set_Value(Reply, "SELECTIONID", Data.Selectionid);
  end Set_Values;
--------------------------------------------


  procedure Make_Ud4_Telegram(Request   : in out Uniface_Request.Request_Type;
                              Operation	: in     Operation_Type := Get_One_Record) is
    use Uniface_Request;
    Next_Column : Integer_2;
    Offset      : Natural := 0;
  begin
    Construct_Ud4_Record(Request, "DRYRESULTSF", 2, Next_Column, Offset, Operation);
    Add_Column(Request, "MARKETID", INTEGER_4_FORMAT, Offset);
    Add_Column(Request, "SELECTIONID", INTEGER_4_FORMAT, Offset);
    Init_Values(Request,Offset);
  end Make_Ud4_Telegram;
--------------------------------------------


  procedure Make_Ud4_Telegram(Request   : in out Uniface_Request.Request_Type;
                              Data      : in     Table_Dryresultsf.Data_Type;
                              Operation	: in     Operation_Type := Get_One_Record) is
  begin
    Make_Ud4_Telegram(Request, Operation);
    Set_Values(Request, Data);
  end Make_Ud4_Telegram;
--------------------------------------------





  -- Procedures for all DBMS


  function Date_To_String(Date : in Sattmate_Calendar.Time_Type) return String is
    package Integer_2_Io is new Text_Io.Integer_Io(Integer_2);
    Date_String : String(1..10) := "yyyy-mm-dd";
  begin
    Integer_2_Io.Put(Date_String(9..10), Date.Day);
    Integer_2_Io.Put(Date_String(6..7), Date.Month);
    Integer_2_Io.Put(Date_String(1..4), Date.Year);
    if Date_String(9) = ' ' then Date_String(9) := '0'; end if;
    if Date_String(6) = ' ' then Date_String(6) := '0'; end if;
    return Date_String;
  end Date_To_String;
--------------------------------------------



  function To_String(Data : in Table_Dryresultsf.Data_Type) return String is
  begin
    return
          " Marketid = " & Integer_4'Image(Data.Marketid) &
          " Selectionid = " & Integer_4'Image(Data.Selectionid) &
          "";
  end To_String;
--------------------------------------------

  function Format_String(S : in String) return String is
    use Standard8; use CGI;
  begin
     return General_Routines.Skip_Trailing_Blanks(To_String(Cgi.Cvtput_Xml(To_String8(S))));
  end Format_String;
--------------------------------------------

  function To_Xml(Data      : in Table_Dryresultsf.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String is
    Ls      : constant String := "";
    S_Start : constant String := "<DRYRESULTSF_ROW>"  & Ls;
    S_End   : constant String := "</DRYRESULTSF_ROW>" & Ls;
    S1 : constant String :=
          "<MARKETID>" &  General_Routines.Trim(Integer_4'Image(Data.Marketid)) & "</MARKETID>" & Ls;
    S2 : constant String :=
          "<SELECTIONID>" &  General_Routines.Trim(Integer_4'Image(Data.Selectionid)) & "</SELECTIONID>" & Ls;
    --------------------------------
    function Get_String(S : in String; Ret : in Boolean) return String is
      use Standard8;
    begin
      if Ret then return S; else return ""; end if;
    end Get_String;
    --------------------------------
  begin
    return Get_String(S_Start, Ret_Start) & 
           Get_String(
            S1 &  S2 ,
            Ret_Data) &
           Get_String(S_End, Ret_End) & Ascii.LF;
  end To_Xml;
  --------------------------------------------


  --------------------------------------------
  type Dryresultsf_Reader is new Sax.Readers.Reader with record
    Current_Tag    : Unbounded_String := Null_Unbounded_String;
    Accumulated    : Unbounded_String := Null_Unbounded_String;
    OK             : Boolean := True;
    Found_Set      : Boolean := True;
    Dryresultsf_List     : Table_Dryresultsf.Dryresultsf_List_Pack.List_Type;
    Dryresultsf_Data     : Table_Dryresultsf.Data_Type := Empty_Data;
  end record;

  overriding procedure Start_Element(Handler       : in out Dryresultsf_Reader;
                                     Namespace_URI : Unicode.CES.Byte_Sequence := "";
                                     Local_Name    : Unicode.CES.Byte_Sequence := "";
                                     Qname         : Unicode.CES.Byte_Sequence := "";
                                     Atts          : Sax.Attributes.Attributes'Class);

  overriding procedure End_Element(Handler         : in out Dryresultsf_Reader;
                                   Namespace_URI   : Unicode.CES.Byte_Sequence := "";
                                   Local_Name      : Unicode.CES.Byte_Sequence := "";
                                   Qname           : Unicode.CES.Byte_Sequence := "") ;

  overriding procedure Characters(Handler          : in out Dryresultsf_Reader;
                                  Ch               : Unicode.CES.Byte_Sequence := "");

  --------------------------------------------
  procedure Start_Element(Handler       : in out Dryresultsf_Reader;
                          Namespace_URI : Unicode.CES.Byte_Sequence := "";
                          Local_Name    : Unicode.CES.Byte_Sequence := "";
                          Qname         : Unicode.CES.Byte_Sequence := "";
                          Atts          : Sax.Attributes.Attributes'Class) is
    pragma Warnings(Off,Namespace_URI);
    pragma Warnings(Off,Qname);
    pragma Warnings(Off,Atts);
    The_Tag : constant String := Local_Name;
  begin
    Handler.Current_Tag := To_Unbounded_String(The_Tag);
    Handler.Accumulated := Null_Unbounded_String;
    if The_Tag = Table_Dryresultsf_Set_Name then
      Handler.Found_Set := true;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
    when Constraint_Error         => Handler.OK := False;
  end Start_Element;
  --------------------------------------------

  --------------------------------------------
  procedure End_Element(Handler       : in out Dryresultsf_Reader;
                        Namespace_URI : Unicode.CES.Byte_Sequence := "";
                        Local_Name    : Unicode.CES.Byte_Sequence := "";
                        Qname         : Unicode.CES.Byte_Sequence := "") is
    pragma Warnings(Off,Namespace_URI);
    pragma Warnings(Off,Qname);
    The_Tag : constant String := Local_Name;
  begin
    if The_Tag = Table_Dryresultsf_Set_Name then
      Handler.Found_Set := false;
    elsif The_Tag = Table_Dryresultsf_Row_Name then
      if Handler.Found_Set then
        Table_Dryresultsf.Dryresultsf_List_Pack.Insert_At_Tail(Handler.Dryresultsf_List, Handler.Dryresultsf_Data);
        Handler.Dryresultsf_Data := Empty_Data;
      end if;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
  end End_Element;
  --------------------------------------------

  --------------------------------------------
  procedure Characters(Handler          : in out Dryresultsf_Reader;
                       Ch               : Unicode.CES.Byte_Sequence := "") is
    function To_Iso_Latin_15(Str : Unicode.CES.Byte_Sequence) return String is
      use Unicode.Encodings;
    begin
      return  Convert(Str, Get_By_Name("utf-8"),Get_By_Name("iso-8859-15"));
    end To_Iso_Latin_15;
    The_Tag   : constant String := To_String(Handler.Current_Tag);
    The_Value : constant string := To_Iso_Latin_15(Ch);
    procedure Fix_String (Value    : string;
                          Variable : in out string) is
    begin
      Append(Handler.Accumulated, The_Value);
      Ada.Strings.Fixed.Move(To_String(Handler.Accumulated), Variable);
    end Fix_String;
  begin
    if Handler.Found_Set then
      if    The_Tag = MARKETID_Name then 
        Handler.Dryresultsf_Data.Marketid := Integer_4'value(The_Value);
      elsif The_Tag = SELECTIONID_Name then 
        Handler.Dryresultsf_Data.Selectionid := Integer_4'value(The_Value);
      end if;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
  end Characters;

  --------------------------------------------
  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Dryresultsf_List_Pack.List_Type) is
    My_Reader   : Dryresultsf_Reader;
    Input       : File_Input;
  begin
    My_Reader.Dryresultsf_List := A_List;
    My_Reader.Current_Tag := Null_Unbounded_String;
    Open(To_String(Xml_Filename), Input);
    My_Reader.Set_Feature(Validation_Feature,False);
    My_Reader.Parse(Input);
    Input.Close;
    if not My_Reader.OK then
       Table_Dryresultsf.Dryresultsf_List_Pack.Remove_All(My_Reader.Dryresultsf_List);
    end if;
    A_List := My_Reader.Dryresultsf_List;
  end From_Xml;

end Table_Dryresultsf ;

