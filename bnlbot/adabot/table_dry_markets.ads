-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Uniface_Request, Sql, Simple_List_Class;

package Table_Dry_markets is

  use Sattmate_Types, Sattmate_Calendar, Uniface_Request;

  type Data_Type is record
      Market_id :    Integer_4  := 0 ; -- Primary Key
      Bsp_market :    String (1..0) := (others => ' ') ; --
      Market_type :    String (1..0) := (others => ' ') ; --
      Event_hierarchy :    String (1..0) := (others => ' ') ; -- non unique index 2
      Last_refresh :    Time_Type  := Time_Type_First ; --
      Turning_in_play :    String (1..0) := (others => ' ') ; --
      Menu_path :    String (1..0) := (others => ' ') ; --
      Bet_delay :    Integer_4  := 0 ; --
      Exchange_id :    Integer_4  := 0 ; --
      Country_code :    String (1..0) := (others => ' ') ; --
      Market_name :    String (1..0) := (others => ' ') ; -- non unique index 3
      Market_status :    Integer_4  := 0 ; --
      Event_date :    Time_Type  := Time_Type_First ; -- non unique index 4
      No_of_runners :    Integer_4  := 0 ; --
      Total_matched :    Integer_4  := 0 ; --
      No_of_winners :    Integer_4  := 0 ; --
  end record;
  Empty_Data : Table_Dry_markets.Data_Type;
  -- 
  -- Table name as string 
  --
  Table_Dry_markets_Name : constant String := "DRY_MARKETS";
  Table_Dry_markets_Set_Name : constant String := "DRY_MARKETS_SET";
  Table_Dry_markets_Row_Name : constant String := "DRY_MARKETS_ROW";
  -- 
  -- Column names as strings 
  --
  Market_id_Name : constant String := "MARKET_ID";
  Bsp_market_Name : constant String := "BSP_MARKET";
  Market_type_Name : constant String := "MARKET_TYPE";
  Event_hierarchy_Name : constant String := "EVENT_HIERARCHY";
  Last_refresh_Name : constant String := "LAST_REFRESH";
  Turning_in_play_Name : constant String := "TURNING_IN_PLAY";
  Menu_path_Name : constant String := "MENU_PATH";
  Bet_delay_Name : constant String := "BET_DELAY";
  Exchange_id_Name : constant String := "EXCHANGE_ID";
  Country_code_Name : constant String := "COUNTRY_CODE";
  Market_name_Name : constant String := "MARKET_NAME";
  Market_status_Name : constant String := "MARKET_STATUS";
  Event_date_Name : constant String := "EVENT_DATE";
  No_of_runners_Name : constant String := "NO_OF_RUNNERS";
  Total_matched_Name : constant String := "TOTAL_MATCHED";
  No_of_winners_Name : constant String := "NO_OF_WINNERS";
  -- 
  -- Column names as enumerator literals 
  --
  type Column_Type is (
        Market_id,
        Bsp_market,
        Market_type,
        Event_hierarchy,
        Last_refresh,
        Turning_in_play,
        Menu_path,
        Bet_delay,
        Exchange_id,
        Country_code,
        Market_name,
        Market_status,
        Event_date,
        No_of_runners,
        Total_matched,
        No_of_winners);

  package Dry_markets_List_Pack is new Simple_List_Class(Table_Dry_markets.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Dry_markets.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_Dry_markets.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Market_id : Integer_4) return Boolean;
  --------------------------------------------
  function Get(Market_id : Integer_4) return Table_Dry_markets.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Dry_markets_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out Dry_markets_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_Dry_markets.Data_Type);
  --------------------------------------------
  procedure Update(Data : in out Table_Dry_markets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Insert(Data : in out Table_Dry_markets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  -- Index 

  procedure Read_Event_date(Data  : in     Table_Dry_markets.Data_Type;
                       List  : in out Dry_markets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Event_date(Data       : in out Table_Dry_markets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Event_date(Data : Table_Dry_markets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Event_date(Data  : in     Table_Dry_markets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Event_hierarchy(Data  : in     Table_Dry_markets.Data_Type;
                       List  : in out Dry_markets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Event_hierarchy(Data       : in out Table_Dry_markets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Event_hierarchy(Data : Table_Dry_markets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Event_hierarchy(Data  : in     Table_Dry_markets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Market_name(Data  : in     Table_Dry_markets.Data_Type;
                       List  : in out Dry_markets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Market_name(Data       : in out Table_Dry_markets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Market_name(Data : Table_Dry_markets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Market_name(Data  : in     Table_Dry_markets.Data_Type);
  --------------------------------------------


  -- Procedures for DBMS UD4

  --------------------------------------------
  procedure Get_Values(Request : in     Request_Type;
                       Data    : in out Table_Dry_markets.Data_Type);
  --------------------------------------------

  procedure Set_Values(Reply  : in out Request_Type;
                       Data   : in     Table_Dry_markets.Data_Type);
  --------------------------------------------

  procedure Make_Ud4_Telegram(Request   : in out Uniface_Request.Request_Type;
                              Operation	: in     Operation_Type := Get_One_Record);
  --------------------------------------------

  procedure Make_Ud4_Telegram(Request   : in out Uniface_Request.Request_Type;
                              Data      : in     Table_Dry_markets.Data_Type;
                              Operation	: in     Operation_Type := Get_One_Record);
  --------------------------------------------




  -- Procedures for all DBMS

  function To_String(Data : in Table_Dry_markets.Data_Type) return String;

  function To_Xml(Data      : in Table_Dry_markets.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String;

  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Dry_markets_List_Pack.List_Type);

end Table_Dry_markets ;
