-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Uniface_Request, Sql, Simple_List_Class;

package Table_Dry_results is

  use Sattmate_Types, Sattmate_Calendar, Uniface_Request;

  type Data_Type is record
      Market_id :    Integer_4  := 0 ; -- Primary Key
      Selection_id :    Integer_4  := 0 ; -- Primary Key
  end record;
  Empty_Data : Table_Dry_results.Data_Type;
  -- 
  -- Table name as string 
  --
  Table_Dry_results_Name : constant String := "DRY_RESULTS";
  Table_Dry_results_Set_Name : constant String := "DRY_RESULTS_SET";
  Table_Dry_results_Row_Name : constant String := "DRY_RESULTS_ROW";
  -- 
  -- Column names as strings 
  --
  Market_id_Name : constant String := "MARKET_ID";
  Selection_id_Name : constant String := "SELECTION_ID";
  -- 
  -- Column names as enumerator literals 
  --
  type Column_Type is (
        Market_id,
        Selection_id);

  package Dry_results_List_Pack is new Simple_List_Class(Table_Dry_results.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Dry_results.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_Dry_results.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Market_id : Integer_4;
                       Selection_id : Integer_4) return Boolean;
  --------------------------------------------
  function Get(Market_id : Integer_4;
                       Selection_id : Integer_4) return Table_Dry_results.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Dry_results_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out Dry_results_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_Dry_results.Data_Type);
  --------------------------------------------
  procedure Insert(Data : in out Table_Dry_results.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  procedure Read_I1_Market_id(Data  : in     Table_Dry_results.Data_Type;
                       List  : in out Dry_results_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Delete_I1_Market_id(Data  : in     Table_Dry_results.Data_Type);
  --------------------------------------------

  
  -- Procedures for DBMS UD4

  --------------------------------------------
  procedure Get_Values(Request : in     Request_Type;
                       Data    : in out Table_Dry_results.Data_Type);
  --------------------------------------------

  procedure Set_Values(Reply  : in out Request_Type;
                       Data   : in     Table_Dry_results.Data_Type);
  --------------------------------------------

  procedure Make_Ud4_Telegram(Request   : in out Uniface_Request.Request_Type;
                              Operation	: in     Operation_Type := Get_One_Record);
  --------------------------------------------

  procedure Make_Ud4_Telegram(Request   : in out Uniface_Request.Request_Type;
                              Data      : in     Table_Dry_results.Data_Type;
                              Operation	: in     Operation_Type := Get_One_Record);
  --------------------------------------------




  -- Procedures for all DBMS

  function To_String(Data : in Table_Dry_results.Data_Type) return String;

  function To_Xml(Data      : in Table_Dry_results.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String;

  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Dry_results_List_Pack.List_Type);

end Table_Dry_results ;
