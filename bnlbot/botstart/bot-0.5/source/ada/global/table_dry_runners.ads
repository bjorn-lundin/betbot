-----------------------------------------------------
-- This file is AUTOGENERATED by
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at
--9.6-10510
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!-----
-----------DO NOT EDIT THIS FILE!!!!----------------
-----------------------------------------------------



pragma Warnings (Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar,  Sql, Simple_List_Class;

package Table_Dry_Runners is

   use Sattmate_Types, Sattmate_Calendar;

   type Data_Type is record
      Market_Id    :    Integer_4  := 0 ; -- Primary Key
      Selection_Id :    Integer_4  := 0 ; -- Primary Key
      Index        :    Integer_4  := 0 ; --
      Back_Price   :    Float_8  := 0.0 ; --
      Lay_Price    :    Float_8  := 0.0 ; --
      Runner_Name  :    String (1 .. 50) := (others => ' ') ; --
   end record;
   Empty_Data : Table_Dry_Runners.Data_Type;
   --
   -- Table name as string
   --
   Table_Dry_Runners_Name : constant String := "DRY_RUNNERS";
   Table_Dry_Runners_Set_Name : constant String := "DRY_RUNNERS_SET";
   Table_Dry_Runners_Row_Name : constant String := "DRY_RUNNERS_ROW";
   --
   -- Column names as strings
   --
   Market_Id_Name : constant String := "MARKET_ID";
   Selection_Id_Name : constant String := "SELECTION_ID";
   Index_Name : constant String := "INDEX";
   Back_Price_Name : constant String := "BACK_PRICE";
   Lay_Price_Name : constant String := "LAY_PRICE";
   Runner_Name_Name : constant String := "RUNNER_NAME";
   --
   -- Column names as enumerator literals
   --
   type Column_Type is (
                        Market_Id,
                        Selection_Id,
                        Index,
                        Back_Price,
                        Lay_Price,
                        Runner_Name);

   package Dry_Runners_List_Pack is new Simple_List_Class (Table_Dry_Runners.Data_Type);

   -- Procedures for DBMS DEF
   -- Primary key
   function Get (Stm : in Sql.Statement_Type) return Table_Dry_Runners.Data_Type;
   --------------------------------------------
   procedure Read (Data       : in out Table_Dry_Runners.Data_Type;
                   End_Of_Set : in out Boolean);
   --------------------------------------------
   function Is_Existing (Market_Id    : Integer_4;
                         Selection_Id : Integer_4) return Boolean;
   --------------------------------------------
   function Get (Market_Id    : Integer_4;
                 Selection_Id : Integer_4) return Table_Dry_Runners.Data_Type;
   --------------------------------------------

   procedure Read_List (Stm  : in     Sql.Statement_Type;
                        List : in out Dry_Runners_List_Pack.List_Type;
                        Max  : in     Integer_4 := Integer_4'Last);
   --------------------------------------------
   procedure Read_All (List  : in out Dry_Runners_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
   --------------------------------------------
   procedure Delete (Data : in Table_Dry_Runners.Data_Type);
   --------------------------------------------
   procedure Update (Data : in out Table_Dry_Runners.Data_Type; Keep_Timestamp : in Boolean := False);
   --------------------------------------------
   procedure Insert (Data : in out Table_Dry_Runners.Data_Type; Keep_Timestamp : in Boolean := False);
   --------------------------------------------
   -- Primary keys, when several fields

   procedure Read_I1_Market_Id (Data  : in     Table_Dry_Runners.Data_Type;
                                List  : in out Dry_Runners_List_Pack.List_Type;
                                Order : in     Boolean := False;
                                Max   : in     Integer_4 := Integer_4'Last);
   --------------------------------------------

   procedure Delete_I1_Market_Id (Data  : in     Table_Dry_Runners.Data_Type);
   --------------------------------------------


   -- Procedures for all DBMS

   function To_String (Data : in Table_Dry_Runners.Data_Type) return String;


end Table_Dry_Runners ;
