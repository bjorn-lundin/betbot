
-----------------------------------------------------
-- This file is AUTOGENERATED by
-- c:/bnl/svn/wcs-std/sattmate/script/local/make_table_package.tcl at
--9.6-10510
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!-----
-----------DO NOT EDIT THIS FILE!!!!----------------
-----------------------------------------------------




pragma Warnings (Off);
with  General_Routines, Text_Io;
with Ada.Strings.Fixed;

package body Table_Dry_Runners is

   Stm_Select,
   Stm_Delete,
   Stm_Update,
   Stm_Insert,
   Stm_Select_All,
   Stm_Select_All_O  : Sql.Statement_Type;


   -- Primary key, if several fields
   Stm_Select_I1_Market_Id_O,
   Stm_Select_I1_Market_Id,
   Stm_Delete_I1_Market_Id : Sql.Statement_Type;


   -- Procedures for DBMS DEF
   -- Primary key
   function Get (Stm : in Sql.Statement_Type) return Table_Dry_Runners.Data_Type is
      Data : Table_Dry_Runners.Data_Type;
   begin
      if not Sql.Is_Null (Stm, "MARKET_ID") then
         Sql.Get (Stm, "MARKET_ID", Data.Market_Id);
      else
         Data.Market_Id := 0;
      end if;
      if not Sql.Is_Null (Stm, "SELECTION_ID") then
         Sql.Get (Stm, "SELECTION_ID", Data.Selection_Id);
      else
         Data.Selection_Id := 0;
      end if;
      if not Sql.Is_Null (Stm, "INDEX") then
         Sql.Get (Stm, "INDEX", Data.Index);
      else
         Data.Index := 0;
      end if;
      if not Sql.Is_Null (Stm, "BACK_PRICE") then
         Sql.Get (Stm, "BACK_PRICE", Data.Back_Price);
      else
         Data.Back_Price := 0.0;
      end if;
      if not Sql.Is_Null (Stm, "LAY_PRICE") then
         Sql.Get (Stm, "LAY_PRICE", Data.Lay_Price);
      else
         Data.Lay_Price := 0.0;
      end if;
      if not Sql.Is_Null (Stm, "RUNNER_NAME") then
         Sql.Get (Stm, "RUNNER_NAME", Data.Runner_Name);
      else
         Data.Runner_Name := (others => ' ');
      end if;
      return Data;
   end Get;
   ---------------------------------------------

   function Get (Market_Id    : Integer_4;
                 Selection_Id : Integer_4) return Table_Dry_Runners.Data_Type is
      Data       : Table_Dry_Runners.Data_Type;
      End_Of_Set : Boolean := True;
   begin
      Data.Market_Id := Market_Id;
      Data.Selection_Id := Selection_Id;
      Read (Data, End_Of_Set);
      return Data;
   end Get;
   --------------------------------------------

   procedure Read_All (List  : in out Dry_Runners_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
      use Sql;
      Start_Trans  : constant Boolean := (Sql.Transaction_Status = Sql.None);
      Transaction  : Sql.Transaction_Type;
   begin
      if Start_Trans then Sql.Start_Read_Write_Transaction (Transaction); end if;
      if Order then
         Sql.Prepare (Stm_Select_All_O, "select * from DRY_RUNNERS order by MARKET_ID, SELECTION_ID");
         Read_List (Stm_Select_All_O, List, Max);
      else
         Sql.Prepare (Stm_Select_All, "select * from DRY_RUNNERS");
         Read_List (Stm_Select_All, List, Max);
      end if;
      if Start_Trans then Sql.Commit (Transaction); end if;
   end Read_All;
   --------------------------------------------


   procedure Read_List (Stm  : in     Sql.Statement_Type;
                        List : in out Dry_Runners_List_Pack.List_Type;
                        Max  : in     Integer_4 := Integer_4'Last) is
      use Sql;
      Count        : Integer_4 := 0;
      Data         : Table_Dry_Runners.Data_Type;
      Eos          : Boolean := False;
      Start_Trans  : constant Boolean := (Sql.Transaction_Status = Sql.None);
      Transaction  : Sql.Transaction_Type;
   begin
      if Start_Trans then Sql.Start_Read_Write_Transaction (Transaction); end if;
      Sql.Open_Cursor (Stm);
      loop
         Sql.Fetch (Stm, Eos);
         exit when Eos or Count > Max;
         Data := Get (Stm);
         Dry_Runners_List_Pack.Insert_At_Tail (List, Data);
         Count := Count + 1;
      end loop;
      Sql.Close_Cursor (Stm);
      if Start_Trans then Sql.Commit (Transaction); end if;
   end Read_List;
   --------------------------------------------

   function Is_Existing (Market_Id    : Integer_4;
                         Selection_Id : Integer_4) return Boolean is
      Data       : Table_Dry_Runners.Data_Type;
      End_Of_Set : Boolean := True;
   begin
      Data.Market_Id := Market_Id;
      Data.Selection_Id := Selection_Id;
      Read (Data, End_Of_Set);
      return not End_Of_Set;
   end Is_Existing;
   --------------------------------------------

   procedure Read (Data       : in out Table_Dry_Runners.Data_Type;
                   End_Of_Set : in out Boolean) is
      use Sql;
      Start_Trans   : constant Boolean := (Sql.Transaction_Status = Sql.None);
      Transaction   : Sql.Transaction_Type;
   begin
      if Start_Trans then Sql.Start_Read_Write_Transaction (Transaction); end if;
      Sql.Prepare (Stm_Select, " select * from DRY_RUNNERS " &
                     "where MARKET_ID=:MARKET_ID" &
                     " and SELECTION_ID=:SELECTION_ID" ) ;
      Sql.Set (Stm_Select, "MARKET_ID", Data.Market_Id);
      Sql.Set (Stm_Select, "SELECTION_ID", Data.Selection_Id);

      Sql.Open_Cursor (Stm_Select);
      Sql.Fetch (Stm_Select, End_Of_Set);
      if not End_Of_Set then
         Data := Get (Stm_Select);
      end if;
      Sql.Close_Cursor (Stm_Select);
      if Start_Trans then Sql.Commit (Transaction); end if;
   end Read;
   ---------------------------------------------

   procedure Delete (Data : in Table_Dry_Runners.Data_Type) is
   begin
      Sql.Prepare (Stm_Delete, " delete from DRY_RUNNERS " &
                     "where MARKET_ID=:MARKET_ID" &
                     " and SELECTION_ID=:SELECTION_ID" ) ;
      Sql.Set (Stm_Delete, "MARKET_ID", Data.Market_Id);
      Sql.Set (Stm_Delete, "SELECTION_ID", Data.Selection_Id);

      Sql.Execute (Stm_Delete);
   end Delete;
   --------------------------------------------

   procedure Update (Data : in out Table_Dry_Runners.Data_Type; Keep_Timestamp : in Boolean := False) is
   begin
      Sql.Prepare (Stm_Update, "update DRY_RUNNERS set " &
                     "INDEX=:INDEX," &
                     "BACK_PRICE=:BACK_PRICE," &
                     "LAY_PRICE=:LAY_PRICE," &
                     "RUNNER_NAME=:RUNNER_NAME " &
                     "where MARKET_ID=:MARKET_ID " &
                     "and SELECTION_ID=:SELECTION_ID " ) ;
      Sql.Set (Stm_Update, "MARKET_ID", Data.Market_Id);
      Sql.Set (Stm_Update, "SELECTION_ID", Data.Selection_Id);
      if Data.Index = 0 then
         Sql.Set_Null (Stm_Update, "INDEX");
      else
         Sql.Set (Stm_Update, "INDEX", Data.Index);
      end if;
      Sql.Set (Stm_Update, "BACK_PRICE", Data.Back_Price);
      Sql.Set (Stm_Update, "LAY_PRICE", Data.Lay_Price);
      Sql.Set (Stm_Update, "RUNNER_NAME", Data.Runner_Name);

      Sql.Execute (Stm_Update);
   end Update;
   --------------------------------------------

   procedure Insert (Data : in out Table_Dry_Runners.Data_Type; Keep_Timestamp : in Boolean := False) is
   begin
      if not Keep_Timestamp then
         null; --for tables without IXX*
      end if;
      Sql.Prepare (Stm_Insert, "insert into DRY_RUNNERS values (" &
                     ":MARKET_ID, " &
                     ":SELECTION_ID, " &
                     ":INDEX, " &
                     ":BACK_PRICE, " &
                     ":LAY_PRICE, " &
                     ":RUNNER_NAME) " ) ;
      Sql.Set (Stm_Insert, "MARKET_ID", Data.Market_Id);
      Sql.Set (Stm_Insert, "SELECTION_ID", Data.Selection_Id);
      if Data.Index = 0 then
         Sql.Set_Null (Stm_Insert, "INDEX");
      else
         Sql.Set (Stm_Insert, "INDEX", Data.Index);
      end if;
      Sql.Set (Stm_Insert, "BACK_PRICE", Data.Back_Price);
      Sql.Set (Stm_Insert, "LAY_PRICE", Data.Lay_Price);
      Sql.Set (Stm_Insert, "RUNNER_NAME", Data.Runner_Name);

      Sql.Execute (Stm_Insert);
   end Insert;
   --------------------------------------------

   -- Primary key, when several fields

   procedure Read_I1_Market_Id (Data  : in     Table_Dry_Runners.Data_Type;
                                List  : in out Dry_Runners_List_Pack.List_Type;
                                Order : in     Boolean := False;
                                Max   : in     Integer_4 := Integer_4'Last) is
      use Sql;
      Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
      Transaction : Sql.Transaction_Type;
   begin
      if (Start_Trans) then Sql.Start_Read_Write_Transaction (Transaction); end if;
      if Order then
         Sql.Prepare (Stm_Select_I1_Market_Id_O, " select * from DRY_RUNNERS " &
                        "where MARKET_ID=:MARKET_ID" &
                        " order by MARKET_ID, SELECTION_ID");
         Sql.Set (Stm_Select_I1_Market_Id_O, "MARKET_ID", Data.Market_Id);

         Read_List (Stm_Select_I1_Market_Id_O, List, Max);
      else
         Sql.Prepare (Stm_Select_I1_Market_Id, " select * from DRY_RUNNERS " &
                        "where MARKET_ID=:MARKET_ID" ) ;
         Sql.Set (Stm_Select_I1_Market_Id, "MARKET_ID", Data.Market_Id);

         Read_List (Stm_Select_I1_Market_Id, List, Max);
      end if;
      if (Start_Trans) then Sql.Commit (Transaction); end if;
   end Read_I1_Market_Id;
   --------------------------------------------

   procedure Delete_I1_Market_Id (Data  : in     Table_Dry_Runners.Data_Type) is
   begin
      Sql.Prepare (Stm_Delete_I1_Market_Id, " delete from DRY_RUNNERS " &
                     "where MARKET_ID=:MARKET_ID" ) ;
      Sql.Set (Stm_Delete_I1_Market_Id, "MARKET_ID", Data.Market_Id);

      Sql.Execute (Stm_Delete_I1_Market_Id);
   end Delete_I1_Market_Id;
   --------------------------------------------

   -- Procedures for all DBMS


   function Date_To_String (Date : in Sattmate_Calendar.Time_Type) return String is
      package Integer_2_Io is new Text_Io.Integer_Io (Integer_2);
      Date_String : String (1 .. 10) := "yyyy-mm-dd";
   begin
      Integer_2_Io.Put (Date_String (9 .. 10), Date.Day);
      Integer_2_Io.Put (Date_String (6 .. 7), Date.Month);
      Integer_2_Io.Put (Date_String (1 .. 4), Date.Year);
      if Date_String (9) = ' ' then Date_String (9) := '0'; end if;
      if Date_String (6) = ' ' then Date_String (6) := '0'; end if;
      return Date_String;
   end Date_To_String;
   --------------------------------------------

   function To_String (Data : in Table_Dry_Runners.Data_Type) return String is
   begin
      return
        " Market_id = " & Integer_4'Image (Data.Market_Id) &
        " Selection_id = " & Integer_4'Image (Data.Selection_Id) &
        " Index = " & Integer_4'Image (Data.Index) &
        " Back_price = " &  General_Routines.F8_To_String (Data.Back_Price) &
        " Lay_price = " &  General_Routines.F8_To_String (Data.Lay_Price) &
        " Runner_name = " & General_Routines.Skip_Trailing_Blanks (Data.Runner_Name) &
        "";
   end To_String;
   --------------------------------------------


end Table_Dry_Runners ;

