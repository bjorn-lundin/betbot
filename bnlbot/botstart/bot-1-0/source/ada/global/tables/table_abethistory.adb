
-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-0/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------




pragma Warnings(Off);
with Process_io, General_Routines, Text_Io;
with Ada.Strings.Fixed;

package body Table_Abethistory is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  Stm_Delete_With_Check,
  Stm_Update_With_Check  : Sql.Statement_Type;


  -- Primary key, if several fields
  Stm_Select_I1_Betid_O,
  Stm_Select_I1_Betid,
  Stm_Delete_I1_Betid : Sql.Statement_Type; 

  -- Index 
  Stm_Select_Count_Startts ,
  Stm_Select_Startts ,
  Stm_Delete_Startts ,
  Stm_Select_Startts_O : Sql.Statement_Type;


  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Abethistory.Data_Type is
    Data : Table_Abethistory.Data_Type;
  begin
    if not Sql.Is_Null(Stm, "BETID") then
      Sql.Get(Stm, "BETID", Data.Betid);
    else
      Data.Betid := 0;
    end if;
    if not Sql.Is_Null(Stm, "POWERDAYS") then
      Sql.Get(Stm, "POWERDAYS", Data.Powerdays);
    else
      Data.Powerdays := 0;
    end if;
    if not Sql.Is_Null(Stm, "STARTTS") then
      Sql.Get_Timestamp(Stm, "STARTTS", Data.Startts);
    else
      Data.Startts := Time_Type_First;
    end if;
    if not Sql.Is_Null(Stm, "HISTORYSUM") then
      Sql.Get(Stm, "HISTORYSUM", Data.Historysum);
    else
      Data.Historysum := 0.0;
    end if;
    if not Sql.Is_Null(Stm, "IXXLUPD") then
      Sql.Get(Stm, "IXXLUPD", Data.Ixxlupd);
    else
      Data.Ixxlupd := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "IXXLUTS") then
      Sql.Get_Timestamp(Stm, "IXXLUTS", Data.Ixxluts);
    else
      Data.Ixxluts := Time_Type_First;
    end if;
  return Data;
  end Get;
---------------------------------------------

  function Get(Betid : Integer_8;
                       Powerdays : Integer_4) return Table_Abethistory.Data_Type is
    Data       : Table_Abethistory.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Betid := Betid;
    Data.Powerdays := Powerdays;
    Read(Data, End_Of_Set);
    return Data;
  end Get;
--------------------------------------------

  procedure Read_All(List  : in out Abethistory_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_All_O, "select * from ABETHISTORY order by BETID, POWERDAYS");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Sql.Prepare(Stm_Select_All, "select * from ABETHISTORY");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_All;
--------------------------------------------


  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Abethistory_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Count       : Integer_4 := 0;
    Data        : Table_Abethistory.Data_Type;
    Eos         : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Open_Cursor(Stm);
    loop
      Sql.Fetch(Stm, Eos); 
      exit when Eos or Count > Max;
      Data := Get(Stm);
      Abethistory_List_Pack.Insert_At_Tail(List, Data);
      Count := Count +1;
    end loop;
    Sql.Close_Cursor(Stm);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_List;
--------------------------------------------

  function Is_Existing(Betid : Integer_8;
                       Powerdays : Integer_4) return Boolean is
    Data       : Table_Abethistory.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Betid := Betid;
    Data.Powerdays := Powerdays;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;
--------------------------------------------

  procedure Read(Data       : in out Table_Abethistory.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select, " select * from ABETHISTORY " & 
            "where BETID=:BETID" &
            " and POWERDAYS=:POWERDAYS" ) ;
    Sql.Set(Stm_Select, "BETID", Data.Betid);
    Sql.Set(Stm_Select, "POWERDAYS", Data.Powerdays);

    Sql.Open_Cursor(Stm_Select);
    Sql.Fetch(Stm_Select, End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Sql.Close_Cursor(Stm_Select);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read;
---------------------------------------------

  procedure Delete(Data : in Table_Abethistory.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete, " delete from ABETHISTORY " & 
            "where BETID=:BETID" &
            " and POWERDAYS=:POWERDAYS" ) ;
    Sql.Set(Stm_Delete, "BETID", Data.Betid);
    Sql.Set(Stm_Delete, "POWERDAYS", Data.Powerdays);

    Sql.Execute(Stm_Delete);
  end Delete;
--------------------------------------------

  procedure Update(Data : in out Table_Abethistory.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    Sql.Prepare(Stm_Update, "update ABETHISTORY set " &
            "STARTTS=:STARTTS," &
            "HISTORYSUM=:HISTORYSUM," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where BETID=:BETID " &
            "and POWERDAYS=:POWERDAYS " ) ;
    Sql.Set(Stm_Update, "BETID",Data.Betid);
    Sql.Set(Stm_Update, "POWERDAYS",Data.Powerdays);
    if Data.Startts = Time_Type_First then
      Sql.Set_Null_Date(Stm_Update, "STARTTS");
    else
      Sql.Set_Timestamp(Stm_Update, "STARTTS",Data.Startts);
    end if;
    Sql.Set(Stm_Update, "HISTORYSUM",Data.Historysum);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update);
  end Update;
--------------------------------------------

  procedure Insert(Data : in out Table_Abethistory.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    if not Keep_Timestamp then
      null; --for tables without IXX*
    Data.Ixxluts := Now;
    end if;
    Sql.Prepare(Stm_Insert, "insert into ABETHISTORY values (" &
            ":BETID, " &
            ":POWERDAYS, " &
            ":STARTTS, " &
            ":HISTORYSUM, " &
            ":IXXLUPD, " &
            ":IXXLUTS) " ) ;
    Sql.Set(Stm_Insert, "BETID",Data.Betid);
    Sql.Set(Stm_Insert, "POWERDAYS",Data.Powerdays);
    if Data.Startts = Time_Type_First then
      Sql.Set_Null_Date(Stm_Insert, "STARTTS");
    else
      Sql.Set_Timestamp(Stm_Insert, "STARTTS",Data.Startts);
    end if;
    Sql.Set(Stm_Insert, "HISTORYSUM",Data.Historysum);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Insert, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Insert, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Insert);
  end Insert;
--------------------------------------------

  procedure Delete_Withcheck(Data : in Table_Abethistory.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete_With_Check, " delete from ABETHISTORY " & 
            "where BETID=:BETID" &
            " and POWERDAYS=:POWERDAYS" &
            " and IXXLUPD=:IXXLUPD" &
            " and IXXLUTS=:IXXLUTS" ) ;
    Sql.Set(Stm_Delete_With_Check, "BETID", Data.Betid);
    Sql.Set(Stm_Delete_With_Check, "POWERDAYS", Data.Powerdays);
    Sql.Set(Stm_Delete_With_Check, "IXXLUPD", Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Delete_With_Check, "IXXLUTS", Data.Ixxluts);

    Sql.Execute(Stm_Delete_With_Check);
  end Delete_Withcheck;
--------------------------------------------

  procedure Update_Withcheck(Data : in out Table_Abethistory.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin

    Sql.Prepare(Stm_Update_With_Check, "update ABETHISTORY set " &
            "STARTTS=:STARTTS," &
            "HISTORYSUM=:HISTORYSUM," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where BETID=:BETID " &
            "and POWERDAYS=:POWERDAYS " &
            "and IXXLUPD=:OLD_IXXLUPD " &
            "and IXXLUTS=:OLD_IXXLUTS " ) ;
    Sql.Set(Stm_Update_With_Check, "OLD_IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "OLD_IXXLUTS",Data.Ixxluts);
    if not Keep_Timestamp then
      null; --for tables without Ixx* 
      Data.Ixxluts := Now;
    end if;
    Sql.Set(Stm_Update_With_Check, "BETID",Data.Betid);
    Sql.Set(Stm_Update_With_Check, "POWERDAYS",Data.Powerdays);
    if Data.Startts = Time_Type_First then
      Sql.Set_Null_Date(Stm_Update_With_Check, "STARTTS");
    else
      Sql.Set_Timestamp(Stm_Update_With_Check, "STARTTS",Data.Startts);
    end if;
    Sql.Set(Stm_Update_With_Check, "HISTORYSUM",Data.Historysum);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update_With_Check, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update_With_Check);
  end Update_Withcheck;
--------------------------------------------

  -- Primary key, when several fields

  procedure Read_I1_Betid(Data  : in     Table_Abethistory.Data_Type;
                       List  : in out Abethistory_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if (Start_Trans) then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_I1_Betid_O, " select * from ABETHISTORY " & 
            "where BETID=:BETID" &
            " order by BETID, POWERDAYS"); 
      Sql.Set(Stm_Select_I1_Betid_O, "BETID", Data.Betid);
 
      Read_List(Stm_Select_I1_Betid_O, List, Max);
    else
      Sql.Prepare(Stm_Select_I1_Betid, " select * from ABETHISTORY " & 
            "where BETID=:BETID" ) ; 
      Sql.Set(Stm_Select_I1_Betid, "BETID", Data.Betid);
 
      Read_List(Stm_Select_I1_Betid, List, Max);
    end if;
    if (Start_Trans) then Sql.Commit(Transaction); end if;
  end Read_I1_Betid;
  --------------------------------------------

  procedure Delete_I1_Betid(Data  : in     Table_Abethistory.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_I1_Betid, " delete from ABETHISTORY " & 
            "where BETID=:BETID" ) ; 
      Sql.Set(Stm_Delete_I1_Betid, "BETID", Data.Betid);
 
    Sql.Execute(Stm_Delete_I1_Betid);
  end Delete_I1_Betid;
  --------------------------------------------

  function Is_Existing_I1(
                 Betid     : in Integer_8 )     return Boolean is
    Data       : Table_Abethistory.Data_Type;
    End_Of_Set : Boolean := False;
    Is_Exist   : Boolean := False;
    List       : Abethistory_List_Pack.List_Type := Abethistory_List_Pack.Create;
  begin
    Data.Betid := Betid ; 
    Read_I1_Betid(Data, List, False, 1);
    Is_Exist := not Abethistory_List_Pack.Is_Empty(List);
    Abethistory_List_Pack.Release(List);
    return Is_Exist;
  end Is_Existing_I1 ;
  --------------------------------------------

  -- Index 

  procedure Read_Startts(Data  : in     Table_Abethistory.Data_Type;
                       List  : in out Abethistory_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Startts_O, " select * from ABETHISTORY " & 
            "where STARTTS=:STARTTS" &
            " order by BETID, POWERDAYS "  ) ; 
      Sql.Set_Timestamp(Stm_Select_Startts_O,"STARTTS", Data.Startts);
 
      Read_List(Stm_Select_Startts_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Startts, " select * from ABETHISTORY " & 
            "where STARTTS=:STARTTS"  ) ; 
      Sql.Set_Timestamp(Stm_Select_Startts,"STARTTS", Data.Startts);
 
      Read_List(Stm_Select_Startts, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Startts;
---------------------------------------------
  procedure Read_One_Startts(Data       : in out Table_Abethistory.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Abethistory_List_Pack.List_Type := Abethistory_List_Pack.Create;
  begin
    Read_Startts(Data, List, Order, 1);
    if Abethistory_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Abethistory_List_Pack.Remove_From_Head(List, Data);
    end if;
    Abethistory_List_Pack.Release(List);
    end Read_One_Startts;
---------------------------------------------

  function Count_Startts(Data : Table_Abethistory.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Startts, "select count('a') from ABETHISTORY where STARTTS = :STARTTS ");
    Sql.Set_Timestamp(Stm_Select_Count_Startts,"STARTTS", Data.Startts);
 
    Sql.Open_Cursor(Stm_Select_Count_Startts);
    Sql.Fetch(Stm_Select_Count_Startts, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Startts, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Startts);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Startts;
---------------------------------------------
  procedure Delete_Startts(Data  : in     Table_Abethistory.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Startts, " delete from ABETHISTORY " & 
            "where STARTTS=:STARTTS"  ) ; 
      Sql.Set_Timestamp(Stm_Delete_Startts,"STARTTS", Data.Startts);
 
    Sql.Execute(Stm_Delete_Startts);
  end Delete_Startts;
---------------------------------------------



  -- Procedures for all DBMS


  function Date_To_String(Date : in Sattmate_Calendar.Time_Type) return String is
    package Integer_2_Io is new Text_Io.Integer_Io(Integer_2);
    Date_String : String(1..10) := "yyyy-mm-dd";
  begin
    Integer_2_Io.Put(Date_String(9..10), Date.Day);
    Integer_2_Io.Put(Date_String(6..7), Date.Month);
    Integer_2_Io.Put(Date_String(1..4), Date.Year);
    if Date_String(9) = ' ' then Date_String(9) := '0'; end if;
    if Date_String(6) = ' ' then Date_String(6) := '0'; end if;
    return Date_String;
  end Date_To_String;
--------------------------------------------



  function To_String(Data : in Table_Abethistory.Data_Type) return String is
  begin
    return
          " Betid = " & Integer_8'Image(Data.Betid) &
          " Powerdays = " & Integer_4'Image(Data.Powerdays) &
          " Startts = " & Sattmate_Calendar.String_Date_And_Time(Data.Startts, Milliseconds => true) &
          " Historysum = " &  General_Routines.F8_Image(Data.Historysum) &
          " Ixxlupd = " & General_Routines.Skip_Trailing_Blanks(Data.Ixxlupd) &
          " Ixxluts = " & Sattmate_Calendar.String_Date_And_Time(Data.Ixxluts, Milliseconds => true) &
          "";
  end To_String;
--------------------------------------------

end Table_Abethistory ;

