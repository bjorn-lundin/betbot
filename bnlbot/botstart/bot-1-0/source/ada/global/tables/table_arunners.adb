
-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-0/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------




pragma Warnings(Off);
with Process_io, General_Routines, Text_Io;
with Ada.Strings.Fixed;

package body Table_Arunners is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  Stm_Delete_With_Check,
  Stm_Update_With_Check  : Sql.Statement_Type;


  -- Primary key, if several fields
  Stm_Select_I1_Marketid_O,
  Stm_Select_I1_Marketid,
  Stm_Delete_I1_Marketid : Sql.Statement_Type; 

  -- Index 
  Stm_Select_Count_Runnernamestripped ,
  Stm_Select_Runnernamestripped ,
  Stm_Delete_Runnernamestripped ,
  Stm_Select_Runnernamestripped_O : Sql.Statement_Type;


  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Arunners.Data_Type is
    Data : Table_Arunners.Data_Type;
  begin
    if not Sql.Is_Null(Stm, "MARKETID") then
      Sql.Get(Stm, "MARKETID", Data.Marketid);
    else
      Data.Marketid := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "SELECTIONID") then
      Sql.Get(Stm, "SELECTIONID", Data.Selectionid);
    else
      Data.Selectionid := 0;
    end if;
    if not Sql.Is_Null(Stm, "SORTPRIO") then
      Sql.Get(Stm, "SORTPRIO", Data.Sortprio);
    else
      Data.Sortprio := 0;
    end if;
    if not Sql.Is_Null(Stm, "HANDICAP") then
      Sql.Get(Stm, "HANDICAP", Data.Handicap);
    else
      Data.Handicap := 0.0;
    end if;
    if not Sql.Is_Null(Stm, "RUNNERNAME") then
      Sql.Get(Stm, "RUNNERNAME", Data.Runnername);
    else
      Data.Runnername := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "RUNNERNAMESTRIPPED") then
      Sql.Get(Stm, "RUNNERNAMESTRIPPED", Data.Runnernamestripped);
    else
      Data.Runnernamestripped := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "RUNNERNAMENUM") then
      Sql.Get(Stm, "RUNNERNAMENUM", Data.Runnernamenum);
    else
      Data.Runnernamenum := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "IXXLUPD") then
      Sql.Get(Stm, "IXXLUPD", Data.Ixxlupd);
    else
      Data.Ixxlupd := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "IXXLUTS") then
      Sql.Get_Timestamp(Stm, "IXXLUTS", Data.Ixxluts);
    else
      Data.Ixxluts := Time_Type_First;
    end if;
  return Data;
  end Get;
---------------------------------------------

  function Get(Marketid : String;
                       Selectionid : Integer_4) return Table_Arunners.Data_Type is
    Data       : Table_Arunners.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Data.Selectionid := Selectionid;
    Read(Data, End_Of_Set);
    return Data;
  end Get;
--------------------------------------------

  procedure Read_All(List  : in out Arunners_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_All_O, "select * from ARUNNERS order by MARKETID, SELECTIONID");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Sql.Prepare(Stm_Select_All, "select * from ARUNNERS");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_All;
--------------------------------------------


  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Arunners_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Count       : Integer_4 := 0;
    Data        : Table_Arunners.Data_Type;
    Eos         : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Open_Cursor(Stm);
    loop
      Sql.Fetch(Stm, Eos); 
      exit when Eos or Count > Max;
      Data := Get(Stm);
      Arunners_List_Pack.Insert_At_Tail(List, Data);
      Count := Count +1;
    end loop;
    Sql.Close_Cursor(Stm);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_List;
--------------------------------------------

  function Is_Existing(Marketid : String;
                       Selectionid : Integer_4) return Boolean is
    Data       : Table_Arunners.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Data.Selectionid := Selectionid;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;
--------------------------------------------

  procedure Read(Data       : in out Table_Arunners.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select, " select * from ARUNNERS " & 
            "where MARKETID=:MARKETID" &
            " and SELECTIONID=:SELECTIONID" ) ;
    Sql.Set(Stm_Select, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Select, "SELECTIONID", Data.Selectionid);

    Sql.Open_Cursor(Stm_Select);
    Sql.Fetch(Stm_Select, End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Sql.Close_Cursor(Stm_Select);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read;
---------------------------------------------

  procedure Delete(Data : in Table_Arunners.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete, " delete from ARUNNERS " & 
            "where MARKETID=:MARKETID" &
            " and SELECTIONID=:SELECTIONID" ) ;
    Sql.Set(Stm_Delete, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Delete, "SELECTIONID", Data.Selectionid);

    Sql.Execute(Stm_Delete);
  end Delete;
--------------------------------------------

  procedure Update(Data : in out Table_Arunners.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    Sql.Prepare(Stm_Update, "update ARUNNERS set " &
            "SORTPRIO=:SORTPRIO," &
            "HANDICAP=:HANDICAP," &
            "RUNNERNAME=:RUNNERNAME," &
            "RUNNERNAMESTRIPPED=:RUNNERNAMESTRIPPED," &
            "RUNNERNAMENUM=:RUNNERNAMENUM," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where MARKETID=:MARKETID " &
            "and SELECTIONID=:SELECTIONID " ) ;
    Sql.Set(Stm_Update, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Update, "SELECTIONID",Data.Selectionid);
    Sql.Set(Stm_Update, "SORTPRIO",Data.Sortprio);
    Sql.Set(Stm_Update, "HANDICAP",Data.Handicap);
    Sql.Set(Stm_Update, "RUNNERNAME",Data.Runnername);
    if Data.Runnernamestripped = (Data.Runnernamestripped'Range => ' ') then
      Sql.Set_Null(Stm_Update, "RUNNERNAMESTRIPPED");
    else
      Sql.Set(Stm_Update, "RUNNERNAMESTRIPPED",Data.Runnernamestripped);
    end if;
    if Data.Runnernamenum = (Data.Runnernamenum'Range => ' ') then
      Sql.Set_Null(Stm_Update, "RUNNERNAMENUM");
    else
      Sql.Set(Stm_Update, "RUNNERNAMENUM",Data.Runnernamenum);
    end if;
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update);
  end Update;
--------------------------------------------

  procedure Insert(Data : in out Table_Arunners.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    if not Keep_Timestamp then
      null; --for tables without IXX*
    Data.Ixxluts := Now;
    end if;
    Sql.Prepare(Stm_Insert, "insert into ARUNNERS values (" &
            ":MARKETID, " &
            ":SELECTIONID, " &
            ":SORTPRIO, " &
            ":HANDICAP, " &
            ":RUNNERNAME, " &
            ":RUNNERNAMESTRIPPED, " &
            ":RUNNERNAMENUM, " &
            ":IXXLUPD, " &
            ":IXXLUTS) " ) ;
    Sql.Set(Stm_Insert, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Insert, "SELECTIONID",Data.Selectionid);
    Sql.Set(Stm_Insert, "SORTPRIO",Data.Sortprio);
    Sql.Set(Stm_Insert, "HANDICAP",Data.Handicap);
    Sql.Set(Stm_Insert, "RUNNERNAME",Data.Runnername);
    if Data.Runnernamestripped = (Data.Runnernamestripped'Range => ' ') then
      Sql.Set_Null(Stm_Insert, "RUNNERNAMESTRIPPED");
    else
      Sql.Set(Stm_Insert, "RUNNERNAMESTRIPPED",Data.Runnernamestripped);
    end if;
    if Data.Runnernamenum = (Data.Runnernamenum'Range => ' ') then
      Sql.Set_Null(Stm_Insert, "RUNNERNAMENUM");
    else
      Sql.Set(Stm_Insert, "RUNNERNAMENUM",Data.Runnernamenum);
    end if;
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Insert, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Insert, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Insert);
  end Insert;
--------------------------------------------

  procedure Delete_Withcheck(Data : in Table_Arunners.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete_With_Check, " delete from ARUNNERS " & 
            "where MARKETID=:MARKETID" &
            " and SELECTIONID=:SELECTIONID" &
            " and IXXLUPD=:IXXLUPD" &
            " and IXXLUTS=:IXXLUTS" ) ;
    Sql.Set(Stm_Delete_With_Check, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Delete_With_Check, "SELECTIONID", Data.Selectionid);
    Sql.Set(Stm_Delete_With_Check, "IXXLUPD", Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Delete_With_Check, "IXXLUTS", Data.Ixxluts);

    Sql.Execute(Stm_Delete_With_Check);
  end Delete_Withcheck;
--------------------------------------------

  procedure Update_Withcheck(Data : in out Table_Arunners.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin

    Sql.Prepare(Stm_Update_With_Check, "update ARUNNERS set " &
            "SORTPRIO=:SORTPRIO," &
            "HANDICAP=:HANDICAP," &
            "RUNNERNAME=:RUNNERNAME," &
            "RUNNERNAMESTRIPPED=:RUNNERNAMESTRIPPED," &
            "RUNNERNAMENUM=:RUNNERNAMENUM," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where MARKETID=:MARKETID " &
            "and SELECTIONID=:SELECTIONID " &
            "and IXXLUPD=:OLD_IXXLUPD " &
            "and IXXLUTS=:OLD_IXXLUTS " ) ;
    Sql.Set(Stm_Update_With_Check, "OLD_IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "OLD_IXXLUTS",Data.Ixxluts);
    if not Keep_Timestamp then
      null; --for tables without Ixx* 
      Data.Ixxluts := Now;
    end if;
    Sql.Set(Stm_Update_With_Check, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Update_With_Check, "SELECTIONID",Data.Selectionid);
    Sql.Set(Stm_Update_With_Check, "SORTPRIO",Data.Sortprio);
    Sql.Set(Stm_Update_With_Check, "HANDICAP",Data.Handicap);
    Sql.Set(Stm_Update_With_Check, "RUNNERNAME",Data.Runnername);
    if Data.Runnernamestripped = (Data.Runnernamestripped'Range => ' ') then
      Sql.Set_Null(Stm_Update_With_Check, "RUNNERNAMESTRIPPED");
    else
      Sql.Set(Stm_Update_With_Check, "RUNNERNAMESTRIPPED",Data.Runnernamestripped);
    end if;
    if Data.Runnernamenum = (Data.Runnernamenum'Range => ' ') then
      Sql.Set_Null(Stm_Update_With_Check, "RUNNERNAMENUM");
    else
      Sql.Set(Stm_Update_With_Check, "RUNNERNAMENUM",Data.Runnernamenum);
    end if;
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update_With_Check, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update_With_Check);
  end Update_Withcheck;
--------------------------------------------

  -- Primary key, when several fields

  procedure Read_I1_Marketid(Data  : in     Table_Arunners.Data_Type;
                       List  : in out Arunners_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if (Start_Trans) then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_I1_Marketid_O, " select * from ARUNNERS " & 
            "where MARKETID=:MARKETID" &
            " order by MARKETID, SELECTIONID"); 
      Sql.Set(Stm_Select_I1_Marketid_O, "MARKETID", Data.Marketid);
 
      Read_List(Stm_Select_I1_Marketid_O, List, Max);
    else
      Sql.Prepare(Stm_Select_I1_Marketid, " select * from ARUNNERS " & 
            "where MARKETID=:MARKETID" ) ; 
      Sql.Set(Stm_Select_I1_Marketid, "MARKETID", Data.Marketid);
 
      Read_List(Stm_Select_I1_Marketid, List, Max);
    end if;
    if (Start_Trans) then Sql.Commit(Transaction); end if;
  end Read_I1_Marketid;
  --------------------------------------------

  procedure Delete_I1_Marketid(Data  : in     Table_Arunners.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_I1_Marketid, " delete from ARUNNERS " & 
            "where MARKETID=:MARKETID" ) ; 
      Sql.Set(Stm_Delete_I1_Marketid, "MARKETID", Data.Marketid);
 
    Sql.Execute(Stm_Delete_I1_Marketid);
  end Delete_I1_Marketid;
  --------------------------------------------

  function Is_Existing_I1(
                 Marketid     : in String )     return Boolean is
    Data       : Table_Arunners.Data_Type;
    End_Of_Set : Boolean := False;
    Is_Exist   : Boolean := False;
    List       : Arunners_List_Pack.List_Type := Arunners_List_Pack.Create;
  begin
    Data.Marketid := Marketid ; 
    Read_I1_Marketid(Data, List, False, 1);
    Is_Exist := not Arunners_List_Pack.Is_Empty(List);
    Arunners_List_Pack.Release(List);
    return Is_Exist;
  end Is_Existing_I1 ;
  --------------------------------------------

  -- Index 

  procedure Read_Runnernamestripped(Data  : in     Table_Arunners.Data_Type;
                       List  : in out Arunners_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Runnernamestripped_O, " select * from ARUNNERS " & 
            "where RUNNERNAMESTRIPPED=:RUNNERNAMESTRIPPED" &
            " order by MARKETID, SELECTIONID "  ) ; 
      Sql.Set(Stm_Select_Runnernamestripped_O, "RUNNERNAMESTRIPPED", Data.Runnernamestripped);
 
      Read_List(Stm_Select_Runnernamestripped_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Runnernamestripped, " select * from ARUNNERS " & 
            "where RUNNERNAMESTRIPPED=:RUNNERNAMESTRIPPED"  ) ; 
      Sql.Set(Stm_Select_Runnernamestripped, "RUNNERNAMESTRIPPED", Data.Runnernamestripped);
 
      Read_List(Stm_Select_Runnernamestripped, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Runnernamestripped;
---------------------------------------------
  procedure Read_One_Runnernamestripped(Data       : in out Table_Arunners.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Arunners_List_Pack.List_Type := Arunners_List_Pack.Create;
  begin
    Read_Runnernamestripped(Data, List, Order, 1);
    if Arunners_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Arunners_List_Pack.Remove_From_Head(List, Data);
    end if;
    Arunners_List_Pack.Release(List);
    end Read_One_Runnernamestripped;
---------------------------------------------

  function Count_Runnernamestripped(Data : Table_Arunners.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Runnernamestripped, "select count('a') from ARUNNERS where RUNNERNAMESTRIPPED = :RUNNERNAMESTRIPPED ");
    Sql.Set(Stm_Select_Count_Runnernamestripped, "RUNNERNAMESTRIPPED", Data.Runnernamestripped);
 
    Sql.Open_Cursor(Stm_Select_Count_Runnernamestripped);
    Sql.Fetch(Stm_Select_Count_Runnernamestripped, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Runnernamestripped, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Runnernamestripped);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Runnernamestripped;
---------------------------------------------
  procedure Delete_Runnernamestripped(Data  : in     Table_Arunners.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Runnernamestripped, " delete from ARUNNERS " & 
            "where RUNNERNAMESTRIPPED=:RUNNERNAMESTRIPPED"  ) ; 
      Sql.Set(Stm_Delete_Runnernamestripped, "RUNNERNAMESTRIPPED", Data.Runnernamestripped);
 
    Sql.Execute(Stm_Delete_Runnernamestripped);
  end Delete_Runnernamestripped;
---------------------------------------------



  -- Procedures for all DBMS


  function Date_To_String(Date : in Sattmate_Calendar.Time_Type) return String is
    package Integer_2_Io is new Text_Io.Integer_Io(Integer_2);
    Date_String : String(1..10) := "yyyy-mm-dd";
  begin
    Integer_2_Io.Put(Date_String(9..10), Date.Day);
    Integer_2_Io.Put(Date_String(6..7), Date.Month);
    Integer_2_Io.Put(Date_String(1..4), Date.Year);
    if Date_String(9) = ' ' then Date_String(9) := '0'; end if;
    if Date_String(6) = ' ' then Date_String(6) := '0'; end if;
    return Date_String;
  end Date_To_String;
--------------------------------------------



  function To_String(Data : in Table_Arunners.Data_Type) return String is
  begin
    return
          " Marketid = " & General_Routines.Skip_Trailing_Blanks(Data.Marketid) &
          " Selectionid = " & Integer_4'Image(Data.Selectionid) &
          " Sortprio = " & Integer_4'Image(Data.Sortprio) &
          " Handicap = " &  General_Routines.F8_Image(Data.Handicap) &
          " Runnername = " & General_Routines.Skip_Trailing_Blanks(Data.Runnername) &
          " Runnernamestripped = " & General_Routines.Skip_Trailing_Blanks(Data.Runnernamestripped) &
          " Runnernamenum = " & General_Routines.Skip_Trailing_Blanks(Data.Runnernamenum) &
          " Ixxlupd = " & General_Routines.Skip_Trailing_Blanks(Data.Ixxlupd) &
          " Ixxluts = " & Sattmate_Calendar.String_Date_And_Time(Data.Ixxluts, Milliseconds => true) &
          "";
  end To_String;
--------------------------------------------

end Table_Arunners ;

