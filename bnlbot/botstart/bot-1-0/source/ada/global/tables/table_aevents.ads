-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-0/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Sql, Simple_List_Class;

package Table_Aevents is

  use Sattmate_Types, Sattmate_Calendar;

  type Data_Type is record
      Eventid :    String (1..11) := (others => ' ') ; -- Primary Key
      Eventname :    String (1..50) := (others => ' ') ; --
      Countrycode :    String (1..2) := (others => ' ') ; -- non unique index 2
      Timezone :    String (1..50) := (others => ' ') ; --
      Opents :    Time_Type  := Time_Type_First ; -- non unique index 3
      Eventtypeid :    Integer_4  := 0 ; -- non unique index 4
      Ixxlupd :    String (1..15) := (others => ' ') ; --
      Ixxluts :    Time_Type  := Time_Type_First ; --
  end record;
  Empty_Data : Table_Aevents.Data_Type;
  -- 
  -- Table name as string 
  --
  Table_Aevents_Name : constant String := "AEVENTS";
  Table_Aevents_Set_Name : constant String := "AEVENTS_SET";
  Table_Aevents_Row_Name : constant String := "AEVENTS_ROW";
  -- 
  -- Column names as strings 
  --
  Eventid_Name : constant String := "EVENTID";
  Eventname_Name : constant String := "EVENTNAME";
  Countrycode_Name : constant String := "COUNTRYCODE";
  Timezone_Name : constant String := "TIMEZONE";
  Opents_Name : constant String := "OPENTS";
  Eventtypeid_Name : constant String := "EVENTTYPEID";
  Ixxlupd_Name : constant String := "IXXLUPD";
  Ixxluts_Name : constant String := "IXXLUTS";
  -- 
  -- Column names as enumerator literals 
  --
  type Column_Type is (
        Eventid,
        Eventname,
        Countrycode,
        Timezone,
        Opents,
        Eventtypeid,
        Ixxlupd,
        Ixxluts);

  package Aevents_List_Pack is new Simple_List_Class(Table_Aevents.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Aevents.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_Aevents.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Eventid : String) return Boolean;
  --------------------------------------------
  function Get(Eventid : String) return Table_Aevents.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Aevents_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out Aevents_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_Aevents.Data_Type);
  --------------------------------------------
  procedure Update(Data : in out Table_Aevents.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Insert(Data : in out Table_Aevents.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Delete_Withcheck(Data : in Table_Aevents.Data_Type);
  --------------------------------------------
  procedure Update_Withcheck(Data : in out Table_Aevents.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  -- Index 

  procedure Read_Countrycode(Data  : in     Table_Aevents.Data_Type;
                       List  : in out Aevents_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Countrycode(Data       : in out Table_Aevents.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Countrycode(Data : Table_Aevents.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Countrycode(Data  : in     Table_Aevents.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Opents(Data  : in     Table_Aevents.Data_Type;
                       List  : in out Aevents_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Opents(Data       : in out Table_Aevents.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Opents(Data : Table_Aevents.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Opents(Data  : in     Table_Aevents.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Eventtypeid(Data  : in     Table_Aevents.Data_Type;
                       List  : in out Aevents_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventtypeid(Data       : in out Table_Aevents.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventtypeid(Data : Table_Aevents.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventtypeid(Data  : in     Table_Aevents.Data_Type);
  --------------------------------------------


  -- Procedures for all DBMS

  function To_String(Data : in Table_Aevents.Data_Type) return String;

end Table_Aevents ;
