-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-0/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Sql, Simple_List_Class;

package Table_History is

  use Sattmate_Types, Sattmate_Calendar;

  type Data_Type is record
      Pk :    Integer_4  := 0 ; -- Primary Key
      Sportsid :    Integer_4  := 0 ; -- non unique index 2
      Eventid :    Integer_4  := 0 ; -- non unique index 3
      Settleddate :    Time_Type  := Time_Type_First ; --
      Country :    String (1..3) := (others => ' ') ; -- non unique index 4
      Fulldescription :    String (1..200) := (others => ' ') ; -- non unique index 5
      Course :    String (1..50) := (others => ' ') ; --
      Scheduledoff :    Time_Type  := Time_Type_First ; -- non unique index 6
      Event :    String (1..50) := (others => ' ') ; -- non unique index 7
      Selectionid :    Integer_4  := 0 ; -- non unique index 8
      Selection :    String (1..50) := (others => ' ') ; --
      Odds :    Float_8  := 0.0 ; --
      Numberbets :    Integer_4  := 0 ; --
      Volumematched :    Float_8  := 0.0 ; --
      Latesttaken :    Time_Type  := Time_Type_First ; -- non unique index 9
      Firsttaken :    Time_Type  := Time_Type_First ; -- non unique index 10
      Winflag :    Boolean  := False ; --
      Inplay :    String (1..2) := (others => ' ') ; --
  end record;
  Empty_Data : Table_History.Data_Type;
  -- 
  -- Table name as string 
  --
  Table_History_Name : constant String := "HISTORY";
  Table_History_Set_Name : constant String := "HISTORY_SET";
  Table_History_Row_Name : constant String := "HISTORY_ROW";
  -- 
  -- Column names as strings 
  --
  Pk_Name : constant String := "PK";
  Sportsid_Name : constant String := "SPORTSID";
  Eventid_Name : constant String := "EVENTID";
  Settleddate_Name : constant String := "SETTLEDDATE";
  Country_Name : constant String := "COUNTRY";
  Fulldescription_Name : constant String := "FULLDESCRIPTION";
  Course_Name : constant String := "COURSE";
  Scheduledoff_Name : constant String := "SCHEDULEDOFF";
  Event_Name : constant String := "EVENT";
  Selectionid_Name : constant String := "SELECTIONID";
  Selection_Name : constant String := "SELECTION";
  Odds_Name : constant String := "ODDS";
  Numberbets_Name : constant String := "NUMBERBETS";
  Volumematched_Name : constant String := "VOLUMEMATCHED";
  Latesttaken_Name : constant String := "LATESTTAKEN";
  Firsttaken_Name : constant String := "FIRSTTAKEN";
  Winflag_Name : constant String := "WINFLAG";
  Inplay_Name : constant String := "INPLAY";
  -- 
  -- Column names as enumerator literals 
  --
  type Column_Type is (
        Pk,
        Sportsid,
        Eventid,
        Settleddate,
        Country,
        Fulldescription,
        Course,
        Scheduledoff,
        Event,
        Selectionid,
        Selection,
        Odds,
        Numberbets,
        Volumematched,
        Latesttaken,
        Firsttaken,
        Winflag,
        Inplay);

  package History_List_Pack is new Simple_List_Class(Table_History.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_History.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_History.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Pk : Integer_4) return Boolean;
  --------------------------------------------
  function Get(Pk : Integer_4) return Table_History.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out History_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out History_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_History.Data_Type);
  --------------------------------------------
  procedure Update(Data : in out Table_History.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Insert(Data : in out Table_History.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  -- Index 

  procedure Read_Sportsid(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Sportsid(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Sportsid(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Sportsid(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Eventid(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventid(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventid(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventid(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Event(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Event(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Event(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Event(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Country(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Country(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Country(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Country(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Latesttaken(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Latesttaken(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Latesttaken(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Latesttaken(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Eventid_selectionid_latesttaken(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventid_selectionid_latesttaken(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventid_selectionid_latesttaken(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventid_selectionid_latesttaken(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Eventid_selectionid(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventid_selectionid(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventid_selectionid(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventid_selectionid(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Fulldescription(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Fulldescription(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Fulldescription(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Fulldescription(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Firsttaken(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Firsttaken(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Firsttaken(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Firsttaken(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Eventid_selectionid_firsttaken(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventid_selectionid_firsttaken(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventid_selectionid_firsttaken(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventid_selectionid_firsttaken(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Scheduledoff(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Scheduledoff(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Scheduledoff(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Scheduledoff(Data  : in     Table_History.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Scheduledoff_selectionid_firsttaken(Data  : in     Table_History.Data_Type;
                       List  : in out History_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Scheduledoff_selectionid_firsttaken(Data       : in out Table_History.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Scheduledoff_selectionid_firsttaken(Data : Table_History.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Scheduledoff_selectionid_firsttaken(Data  : in     Table_History.Data_Type);
  --------------------------------------------


  -- Procedures for all DBMS

  function To_String(Data : in Table_History.Data_Type) return String;

end Table_History ;
