-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-1/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Sql, Simple_List_Class;

package Table_Dryrunners is

  use Sattmate_Types, Sattmate_Calendar;

  type Data_Type is record
      Marketid :    Integer_4  := 0 ; -- Primary Key
      Selectionid :    Integer_4  := 0 ; -- Primary Key
      Index :    Integer_4  := 0 ; --
      Backprice :    Float_8  := 0.0 ; --
      Layprice :    Float_8  := 0.0 ; --
      Runnername :    String (1..50) := (others => ' ') ; --
      Runnernamestripped :    String (1..50) := (others => ' ') ; -- non unique index 3
      Startnum :    String (1..2) := (others => ' ') ; --
  end record;
  Empty_Data : Table_Dryrunners.Data_Type;
  -- 
  -- Table name as string 
  --
  Table_Dryrunners_Name : constant String := "DRYRUNNERS";
  Table_Dryrunners_Set_Name : constant String := "DRYRUNNERS_SET";
  Table_Dryrunners_Row_Name : constant String := "DRYRUNNERS_ROW";
  -- 
  -- Column names as strings 
  --
  Marketid_Name : constant String := "MARKETID";
  Selectionid_Name : constant String := "SELECTIONID";
  Index_Name : constant String := "INDEX";
  Backprice_Name : constant String := "BACKPRICE";
  Layprice_Name : constant String := "LAYPRICE";
  Runnername_Name : constant String := "RUNNERNAME";
  Runnernamestripped_Name : constant String := "RUNNERNAMESTRIPPED";
  Startnum_Name : constant String := "STARTNUM";
  -- 
  -- Column names as enumerator literals 
  --
  type Column_Type is (
        Marketid,
        Selectionid,
        Index,
        Backprice,
        Layprice,
        Runnername,
        Runnernamestripped,
        Startnum);

  package Dryrunners_List_Pack is new Simple_List_Class(Table_Dryrunners.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Dryrunners.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_Dryrunners.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Marketid : Integer_4;
                       Selectionid : Integer_4) return Boolean;
  --------------------------------------------
  function Get(Marketid : Integer_4;
                       Selectionid : Integer_4) return Table_Dryrunners.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Dryrunners_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out Dryrunners_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_Dryrunners.Data_Type);
  --------------------------------------------
  procedure Update(Data : in out Table_Dryrunners.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Insert(Data : in out Table_Dryrunners.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  procedure Read_I1_Marketid(Data  : in     Table_Dryrunners.Data_Type;
                       List  : in out Dryrunners_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Delete_I1_Marketid(Data  : in     Table_Dryrunners.Data_Type);
  --------------------------------------------

  function Is_Existing_I1(
                 Marketid     : in Integer_4 )      return Boolean;

  -- Index 

  procedure Read_Runnernamestripped(Data  : in     Table_Dryrunners.Data_Type;
                       List  : in out Dryrunners_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Runnernamestripped(Data       : in out Table_Dryrunners.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Runnernamestripped(Data : Table_Dryrunners.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Runnernamestripped(Data  : in     Table_Dryrunners.Data_Type);
  --------------------------------------------


  -- Procedures for all DBMS

  function To_String(Data : in Table_Dryrunners.Data_Type) return String;

end Table_Dryrunners ;
