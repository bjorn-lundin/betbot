-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-1/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Sql, Simple_List_Class;

package Table_Abets is

  use Sattmate_Types, Sattmate_Calendar;

  type Data_Type is record
      Betid :    Integer_8  := 0 ; -- Primary Key
      Marketid :    String (1..11) := (others => ' ') ; -- non unique index 2
      Betmode :    Integer_4  := 0 ; --
      Powerdays :    Integer_4  := 0 ; -- non unique index 3
      Selectionid :    Integer_4  := 0 ; --
      Reference :    String (1..30) := (others => ' ') ; --
      Size :    Float_8  := 0.0 ; --
      Price :    Float_8  := 0.0 ; --
      Side :    String (1..4) := (others => ' ') ; --
      Betname :    String (1..100) := (others => ' ') ; -- non unique index 4
      Betwon :    Boolean  := False ; -- non unique index 5
      Profit :    Float_8  := 0.0 ; --
      Status :    String (1..50) := (others => ' ') ; --
      Exestatus :    String (1..50) := (others => ' ') ; --
      Exeerrcode :    String (1..50) := (others => ' ') ; --
      Inststatus :    String (1..50) := (others => ' ') ; --
      Insterrcode :    String (1..50) := (others => ' ') ; --
      Startts :    Time_Type  := Time_Type_First ; -- non unique index 6
      Betplaced :    Time_Type  := Time_Type_First ; -- non unique index 7
      Pricematched :    Float_8  := 0.0 ; --
      Sizematched :    Float_8  := 0.0 ; --
      Runnername :    String (1..50) := (others => ' ') ; --
      Fullmarketname :    String (1..50) := (others => ' ') ; --
      Svnrevision :    Integer_4  := 0 ; --
      Ixxlupd :    String (1..15) := (others => ' ') ; --
      Ixxluts :    Time_Type  := Time_Type_First ; --
  end record;
  Empty_Data : Table_Abets.Data_Type;
  -- 
  -- Table name as string 
  --
  Table_Abets_Name : constant String := "ABETS";
  Table_Abets_Set_Name : constant String := "ABETS_SET";
  Table_Abets_Row_Name : constant String := "ABETS_ROW";
  -- 
  -- Column names as strings 
  --
  Betid_Name : constant String := "BETID";
  Marketid_Name : constant String := "MARKETID";
  Betmode_Name : constant String := "BETMODE";
  Powerdays_Name : constant String := "POWERDAYS";
  Selectionid_Name : constant String := "SELECTIONID";
  Reference_Name : constant String := "REFERENCE";
  Size_Name : constant String := "SIZE";
  Price_Name : constant String := "PRICE";
  Side_Name : constant String := "SIDE";
  Betname_Name : constant String := "BETNAME";
  Betwon_Name : constant String := "BETWON";
  Profit_Name : constant String := "PROFIT";
  Status_Name : constant String := "STATUS";
  Exestatus_Name : constant String := "EXESTATUS";
  Exeerrcode_Name : constant String := "EXEERRCODE";
  Inststatus_Name : constant String := "INSTSTATUS";
  Insterrcode_Name : constant String := "INSTERRCODE";
  Startts_Name : constant String := "STARTTS";
  Betplaced_Name : constant String := "BETPLACED";
  Pricematched_Name : constant String := "PRICEMATCHED";
  Sizematched_Name : constant String := "SIZEMATCHED";
  Runnername_Name : constant String := "RUNNERNAME";
  Fullmarketname_Name : constant String := "FULLMARKETNAME";
  Svnrevision_Name : constant String := "SVNREVISION";
  Ixxlupd_Name : constant String := "IXXLUPD";
  Ixxluts_Name : constant String := "IXXLUTS";
  -- 
  -- Column names as enumerator literals 
  --
  type Column_Type is (
        Betid,
        Marketid,
        Betmode,
        Powerdays,
        Selectionid,
        Reference,
        Size,
        Price,
        Side,
        Betname,
        Betwon,
        Profit,
        Status,
        Exestatus,
        Exeerrcode,
        Inststatus,
        Insterrcode,
        Startts,
        Betplaced,
        Pricematched,
        Sizematched,
        Runnername,
        Fullmarketname,
        Svnrevision,
        Ixxlupd,
        Ixxluts);

  package Abets_List_Pack is new Simple_List_Class(Table_Abets.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Abets.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_Abets.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Betid : Integer_8) return Boolean;
  --------------------------------------------
  function Get(Betid : Integer_8) return Table_Abets.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Abets_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out Abets_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_Abets.Data_Type);
  --------------------------------------------
  procedure Update(Data : in out Table_Abets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Insert(Data : in out Table_Abets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Delete_Withcheck(Data : in Table_Abets.Data_Type);
  --------------------------------------------
  procedure Update_Withcheck(Data : in out Table_Abets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  -- Index 

  procedure Read_Marketid(Data  : in     Table_Abets.Data_Type;
                       List  : in out Abets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Marketid(Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Marketid(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Marketid(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Betwon(Data  : in     Table_Abets.Data_Type;
                       List  : in out Abets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Betwon(Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Betwon(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Betwon(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Powerdays(Data  : in     Table_Abets.Data_Type;
                       List  : in out Abets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Powerdays(Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Powerdays(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Powerdays(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Betplaced(Data  : in     Table_Abets.Data_Type;
                       List  : in out Abets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Betplaced(Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Betplaced(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Betplaced(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Startts(Data  : in     Table_Abets.Data_Type;
                       List  : in out Abets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Startts(Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Startts(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Startts(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Betname(Data  : in     Table_Abets.Data_Type;
                       List  : in out Abets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Betname(Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Betname(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Betname(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------


  -- Procedures for all DBMS

  function To_String(Data : in Table_Abets.Data_Type) return String;

end Table_Abets ;
