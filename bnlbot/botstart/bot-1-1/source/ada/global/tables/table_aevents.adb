
-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-1/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------




pragma Warnings(Off);
with Process_io, General_Routines, Text_Io;
with Ada.Strings.Fixed;

package body Table_Aevents is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  Stm_Delete_With_Check,
  Stm_Update_With_Check  : Sql.Statement_Type;


  -- Index 
  Stm_Select_Count_Countrycode ,
  Stm_Select_Countrycode ,
  Stm_Delete_Countrycode ,
  Stm_Select_Countrycode_O : Sql.Statement_Type;

  -- Index 
  Stm_Select_Count_Opents ,
  Stm_Select_Opents ,
  Stm_Delete_Opents ,
  Stm_Select_Opents_O : Sql.Statement_Type;

  -- Index 
  Stm_Select_Count_Eventtypeid ,
  Stm_Select_Eventtypeid ,
  Stm_Delete_Eventtypeid ,
  Stm_Select_Eventtypeid_O : Sql.Statement_Type;


  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Aevents.Data_Type is
    Data : Table_Aevents.Data_Type;
  begin
    if not Sql.Is_Null(Stm, "EVENTID") then
      Sql.Get(Stm, "EVENTID", Data.Eventid);
    else
      Data.Eventid := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "EVENTNAME") then
      Sql.Get(Stm, "EVENTNAME", Data.Eventname);
    else
      Data.Eventname := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "COUNTRYCODE") then
      Sql.Get(Stm, "COUNTRYCODE", Data.Countrycode);
    else
      Data.Countrycode := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "TIMEZONE") then
      Sql.Get(Stm, "TIMEZONE", Data.Timezone);
    else
      Data.Timezone := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "OPENTS") then
      Sql.Get_Timestamp(Stm, "OPENTS", Data.Opents);
    else
      Data.Opents := Time_Type_First;
    end if;
    if not Sql.Is_Null(Stm, "EVENTTYPEID") then
      Sql.Get(Stm, "EVENTTYPEID", Data.Eventtypeid);
    else
      Data.Eventtypeid := 0;
    end if;
    if not Sql.Is_Null(Stm, "IXXLUPD") then
      Sql.Get(Stm, "IXXLUPD", Data.Ixxlupd);
    else
      Data.Ixxlupd := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "IXXLUTS") then
      Sql.Get_Timestamp(Stm, "IXXLUTS", Data.Ixxluts);
    else
      Data.Ixxluts := Time_Type_First;
    end if;
  return Data;
  end Get;
---------------------------------------------

  function Get(Eventid : String) return Table_Aevents.Data_Type is
    Data       : Table_Aevents.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Eventid := Eventid;
    Read(Data, End_Of_Set);
    return Data;
  end Get;
--------------------------------------------

  procedure Read_All(List  : in out Aevents_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_All_O, "select * from AEVENTS order by EVENTID");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Sql.Prepare(Stm_Select_All, "select * from AEVENTS");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_All;
--------------------------------------------


  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Aevents_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Count       : Integer_4 := 0;
    Data        : Table_Aevents.Data_Type;
    Eos         : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Open_Cursor(Stm);
    loop
      Sql.Fetch(Stm, Eos); 
      exit when Eos or Count > Max;
      Data := Get(Stm);
      Aevents_List_Pack.Insert_At_Tail(List, Data);
      Count := Count +1;
    end loop;
    Sql.Close_Cursor(Stm);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_List;
--------------------------------------------

  function Is_Existing(Eventid : String) return Boolean is
    Data       : Table_Aevents.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Eventid := Eventid;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;
--------------------------------------------

  procedure Read(Data       : in out Table_Aevents.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select, " select * from AEVENTS " & 
            "where EVENTID=:EVENTID" ) ;
    Sql.Set(Stm_Select, "EVENTID", Data.Eventid);

    Sql.Open_Cursor(Stm_Select);
    Sql.Fetch(Stm_Select, End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Sql.Close_Cursor(Stm_Select);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read;
---------------------------------------------

  procedure Delete(Data : in Table_Aevents.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete, " delete from AEVENTS " & 
            "where EVENTID=:EVENTID" ) ;
    Sql.Set(Stm_Delete, "EVENTID", Data.Eventid);

    Sql.Execute(Stm_Delete);
  end Delete;
--------------------------------------------

  procedure Update(Data : in out Table_Aevents.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    Sql.Prepare(Stm_Update, "update AEVENTS set " &
            "EVENTNAME=:EVENTNAME," &
            "COUNTRYCODE=:COUNTRYCODE," &
            "TIMEZONE=:TIMEZONE," &
            "OPENTS=:OPENTS," &
            "EVENTTYPEID=:EVENTTYPEID," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where EVENTID=:EVENTID " ) ;
    Sql.Set(Stm_Update, "EVENTID",Data.Eventid);
    Sql.Set(Stm_Update, "EVENTNAME",Data.Eventname);
    Sql.Set(Stm_Update, "COUNTRYCODE",Data.Countrycode);
    Sql.Set(Stm_Update, "TIMEZONE",Data.Timezone);
    Sql.Set_Timestamp(Stm_Update, "OPENTS",Data.Opents);
    Sql.Set(Stm_Update, "EVENTTYPEID",Data.Eventtypeid);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update);
  end Update;
--------------------------------------------

  procedure Insert(Data : in out Table_Aevents.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    if not Keep_Timestamp then
      null; --for tables without IXX*
    Data.Ixxluts := Now;
    end if;
    Sql.Prepare(Stm_Insert, "insert into AEVENTS values (" &
            ":EVENTID, " &
            ":EVENTNAME, " &
            ":COUNTRYCODE, " &
            ":TIMEZONE, " &
            ":OPENTS, " &
            ":EVENTTYPEID, " &
            ":IXXLUPD, " &
            ":IXXLUTS) " ) ;
    Sql.Set(Stm_Insert, "EVENTID",Data.Eventid);
    Sql.Set(Stm_Insert, "EVENTNAME",Data.Eventname);
    Sql.Set(Stm_Insert, "COUNTRYCODE",Data.Countrycode);
    Sql.Set(Stm_Insert, "TIMEZONE",Data.Timezone);
    Sql.Set_Timestamp(Stm_Insert, "OPENTS",Data.Opents);
    Sql.Set(Stm_Insert, "EVENTTYPEID",Data.Eventtypeid);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Insert, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Insert, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Insert);
  end Insert;
--------------------------------------------

  procedure Delete_Withcheck(Data : in Table_Aevents.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete_With_Check, " delete from AEVENTS " & 
            "where EVENTID=:EVENTID" &
            " and IXXLUPD=:IXXLUPD" &
            " and IXXLUTS=:IXXLUTS" ) ;
    Sql.Set(Stm_Delete_With_Check, "EVENTID", Data.Eventid);
    Sql.Set(Stm_Delete_With_Check, "IXXLUPD", Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Delete_With_Check, "IXXLUTS", Data.Ixxluts);

    Sql.Execute(Stm_Delete_With_Check);
  end Delete_Withcheck;
--------------------------------------------

  procedure Update_Withcheck(Data : in out Table_Aevents.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin

    Sql.Prepare(Stm_Update_With_Check, "update AEVENTS set " &
            "EVENTNAME=:EVENTNAME," &
            "COUNTRYCODE=:COUNTRYCODE," &
            "TIMEZONE=:TIMEZONE," &
            "OPENTS=:OPENTS," &
            "EVENTTYPEID=:EVENTTYPEID," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where EVENTID=:EVENTID " &
            "and IXXLUPD=:OLD_IXXLUPD " &
            "and IXXLUTS=:OLD_IXXLUTS " ) ;
    Sql.Set(Stm_Update_With_Check, "OLD_IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "OLD_IXXLUTS",Data.Ixxluts);
    if not Keep_Timestamp then
      null; --for tables without Ixx* 
      Data.Ixxluts := Now;
    end if;
    Sql.Set(Stm_Update_With_Check, "EVENTID",Data.Eventid);
    Sql.Set(Stm_Update_With_Check, "EVENTNAME",Data.Eventname);
    Sql.Set(Stm_Update_With_Check, "COUNTRYCODE",Data.Countrycode);
    Sql.Set(Stm_Update_With_Check, "TIMEZONE",Data.Timezone);
    Sql.Set_Timestamp(Stm_Update_With_Check, "OPENTS",Data.Opents);
    Sql.Set(Stm_Update_With_Check, "EVENTTYPEID",Data.Eventtypeid);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update_With_Check, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update_With_Check);
  end Update_Withcheck;
--------------------------------------------

  -- Primary key, when several fields

  -- Index 

  procedure Read_Countrycode(Data  : in     Table_Aevents.Data_Type;
                       List  : in out Aevents_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Countrycode_O, " select * from AEVENTS " & 
            "where COUNTRYCODE=:COUNTRYCODE" &
            " order by EVENTID "  ) ; 
      Sql.Set(Stm_Select_Countrycode_O, "COUNTRYCODE", Data.Countrycode);
 
      Read_List(Stm_Select_Countrycode_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Countrycode, " select * from AEVENTS " & 
            "where COUNTRYCODE=:COUNTRYCODE"  ) ; 
      Sql.Set(Stm_Select_Countrycode, "COUNTRYCODE", Data.Countrycode);
 
      Read_List(Stm_Select_Countrycode, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Countrycode;
---------------------------------------------
  procedure Read_One_Countrycode(Data       : in out Table_Aevents.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Aevents_List_Pack.List_Type := Aevents_List_Pack.Create;
  begin
    Read_Countrycode(Data, List, Order, 1);
    if Aevents_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Aevents_List_Pack.Remove_From_Head(List, Data);
    end if;
    Aevents_List_Pack.Release(List);
    end Read_One_Countrycode;
---------------------------------------------

  function Count_Countrycode(Data : Table_Aevents.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Countrycode, "select count('a') from AEVENTS where COUNTRYCODE = :COUNTRYCODE ");
    Sql.Set(Stm_Select_Count_Countrycode, "COUNTRYCODE", Data.Countrycode);
 
    Sql.Open_Cursor(Stm_Select_Count_Countrycode);
    Sql.Fetch(Stm_Select_Count_Countrycode, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Countrycode, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Countrycode);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Countrycode;
---------------------------------------------
  procedure Delete_Countrycode(Data  : in     Table_Aevents.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Countrycode, " delete from AEVENTS " & 
            "where COUNTRYCODE=:COUNTRYCODE"  ) ; 
      Sql.Set(Stm_Delete_Countrycode, "COUNTRYCODE", Data.Countrycode);
 
    Sql.Execute(Stm_Delete_Countrycode);
  end Delete_Countrycode;
---------------------------------------------


  -- Index 

  procedure Read_Opents(Data  : in     Table_Aevents.Data_Type;
                       List  : in out Aevents_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Opents_O, " select * from AEVENTS " & 
            "where OPENTS=:OPENTS" &
            " order by EVENTID "  ) ; 
      Sql.Set_Timestamp(Stm_Select_Opents_O,"OPENTS", Data.Opents);
 
      Read_List(Stm_Select_Opents_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Opents, " select * from AEVENTS " & 
            "where OPENTS=:OPENTS"  ) ; 
      Sql.Set_Timestamp(Stm_Select_Opents,"OPENTS", Data.Opents);
 
      Read_List(Stm_Select_Opents, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Opents;
---------------------------------------------
  procedure Read_One_Opents(Data       : in out Table_Aevents.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Aevents_List_Pack.List_Type := Aevents_List_Pack.Create;
  begin
    Read_Opents(Data, List, Order, 1);
    if Aevents_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Aevents_List_Pack.Remove_From_Head(List, Data);
    end if;
    Aevents_List_Pack.Release(List);
    end Read_One_Opents;
---------------------------------------------

  function Count_Opents(Data : Table_Aevents.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Opents, "select count('a') from AEVENTS where OPENTS = :OPENTS ");
    Sql.Set_Timestamp(Stm_Select_Count_Opents,"OPENTS", Data.Opents);
 
    Sql.Open_Cursor(Stm_Select_Count_Opents);
    Sql.Fetch(Stm_Select_Count_Opents, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Opents, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Opents);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Opents;
---------------------------------------------
  procedure Delete_Opents(Data  : in     Table_Aevents.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Opents, " delete from AEVENTS " & 
            "where OPENTS=:OPENTS"  ) ; 
      Sql.Set_Timestamp(Stm_Delete_Opents,"OPENTS", Data.Opents);
 
    Sql.Execute(Stm_Delete_Opents);
  end Delete_Opents;
---------------------------------------------


  -- Index 

  procedure Read_Eventtypeid(Data  : in     Table_Aevents.Data_Type;
                       List  : in out Aevents_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Eventtypeid_O, " select * from AEVENTS " & 
            "where EVENTTYPEID=:EVENTTYPEID" &
            " order by EVENTID "  ) ; 
      Sql.Set(Stm_Select_Eventtypeid_O, "EVENTTYPEID", Data.Eventtypeid);
 
      Read_List(Stm_Select_Eventtypeid_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Eventtypeid, " select * from AEVENTS " & 
            "where EVENTTYPEID=:EVENTTYPEID"  ) ; 
      Sql.Set(Stm_Select_Eventtypeid, "EVENTTYPEID", Data.Eventtypeid);
 
      Read_List(Stm_Select_Eventtypeid, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Eventtypeid;
---------------------------------------------
  procedure Read_One_Eventtypeid(Data       : in out Table_Aevents.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Aevents_List_Pack.List_Type := Aevents_List_Pack.Create;
  begin
    Read_Eventtypeid(Data, List, Order, 1);
    if Aevents_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Aevents_List_Pack.Remove_From_Head(List, Data);
    end if;
    Aevents_List_Pack.Release(List);
    end Read_One_Eventtypeid;
---------------------------------------------

  function Count_Eventtypeid(Data : Table_Aevents.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Eventtypeid, "select count('a') from AEVENTS where EVENTTYPEID = :EVENTTYPEID ");
    Sql.Set(Stm_Select_Count_Eventtypeid, "EVENTTYPEID", Data.Eventtypeid);
 
    Sql.Open_Cursor(Stm_Select_Count_Eventtypeid);
    Sql.Fetch(Stm_Select_Count_Eventtypeid, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Eventtypeid, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Eventtypeid);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Eventtypeid;
---------------------------------------------
  procedure Delete_Eventtypeid(Data  : in     Table_Aevents.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Eventtypeid, " delete from AEVENTS " & 
            "where EVENTTYPEID=:EVENTTYPEID"  ) ; 
      Sql.Set(Stm_Delete_Eventtypeid, "EVENTTYPEID", Data.Eventtypeid);
 
    Sql.Execute(Stm_Delete_Eventtypeid);
  end Delete_Eventtypeid;
---------------------------------------------



  -- Procedures for all DBMS


  function Date_To_String(Date : in Sattmate_Calendar.Time_Type) return String is
    package Integer_2_Io is new Text_Io.Integer_Io(Integer_2);
    Date_String : String(1..10) := "yyyy-mm-dd";
  begin
    Integer_2_Io.Put(Date_String(9..10), Date.Day);
    Integer_2_Io.Put(Date_String(6..7), Date.Month);
    Integer_2_Io.Put(Date_String(1..4), Date.Year);
    if Date_String(9) = ' ' then Date_String(9) := '0'; end if;
    if Date_String(6) = ' ' then Date_String(6) := '0'; end if;
    return Date_String;
  end Date_To_String;
--------------------------------------------



  function To_String(Data : in Table_Aevents.Data_Type) return String is
  begin
    return
          " Eventid = " & General_Routines.Skip_Trailing_Blanks(Data.Eventid) &
          " Eventname = " & General_Routines.Skip_Trailing_Blanks(Data.Eventname) &
          " Countrycode = " & General_Routines.Skip_Trailing_Blanks(Data.Countrycode) &
          " Timezone = " & General_Routines.Skip_Trailing_Blanks(Data.Timezone) &
          " Opents = " & Sattmate_Calendar.String_Date_And_Time(Data.Opents, Milliseconds => true) &
          " Eventtypeid = " & Integer_4'Image(Data.Eventtypeid) &
          " Ixxlupd = " & General_Routines.Skip_Trailing_Blanks(Data.Ixxlupd) &
          " Ixxluts = " & Sattmate_Calendar.String_Date_And_Time(Data.Ixxluts, Milliseconds => true) &
          "";
  end To_String;
--------------------------------------------

end Table_Aevents ;

