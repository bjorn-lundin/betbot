
-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-1/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------




pragma Warnings(Off);
with Process_io, General_Routines, Text_Io;
with Ada.Strings.Fixed;

package body Table_Amarkets is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  Stm_Delete_With_Check,
  Stm_Update_With_Check  : Sql.Statement_Type;


  -- Index 
  Stm_Select_Count_Eventid ,
  Stm_Select_Eventid ,
  Stm_Delete_Eventid ,
  Stm_Select_Eventid_O : Sql.Statement_Type;

  -- Index 
  Stm_Select_Count_Markettype ,
  Stm_Select_Markettype ,
  Stm_Delete_Markettype ,
  Stm_Select_Markettype_O : Sql.Statement_Type;

  -- Index 
  Stm_Select_Count_Status ,
  Stm_Select_Status ,
  Stm_Delete_Status ,
  Stm_Select_Status_O : Sql.Statement_Type;

  -- Index 
  Stm_Select_Count_Numwinners ,
  Stm_Select_Numwinners ,
  Stm_Delete_Numwinners ,
  Stm_Select_Numwinners_O : Sql.Statement_Type;


  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Amarkets.Data_Type is
    Data : Table_Amarkets.Data_Type;
  begin
    if not Sql.Is_Null(Stm, "MARKETID") then
      Sql.Get(Stm, "MARKETID", Data.Marketid);
    else
      Data.Marketid := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "MARKETNAME") then
      Sql.Get(Stm, "MARKETNAME", Data.Marketname);
    else
      Data.Marketname := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "STARTTS") then
      Sql.Get_Timestamp(Stm, "STARTTS", Data.Startts);
    else
      Data.Startts := Time_Type_First;
    end if;
    if not Sql.Is_Null(Stm, "EVENTID") then
      Sql.Get(Stm, "EVENTID", Data.Eventid);
    else
      Data.Eventid := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "MARKETTYPE") then
      Sql.Get(Stm, "MARKETTYPE", Data.Markettype);
    else
      Data.Markettype := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "STATUS") then
      Sql.Get(Stm, "STATUS", Data.Status);
    else
      Data.Status := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "BETDELAY") then
      Sql.Get(Stm, "BETDELAY", Data.Betdelay);
    else
      Data.Betdelay := 0;
    end if;
    if not Sql.Is_Null(Stm, "NUMWINNERS") then
      Sql.Get(Stm, "NUMWINNERS", Data.Numwinners);
    else
      Data.Numwinners := 0;
    end if;
    if not Sql.Is_Null(Stm, "NUMRUNNERS") then
      Sql.Get(Stm, "NUMRUNNERS", Data.Numrunners);
    else
      Data.Numrunners := 0;
    end if;
    if not Sql.Is_Null(Stm, "NUMACTIVERUNNERS") then
      Sql.Get(Stm, "NUMACTIVERUNNERS", Data.Numactiverunners);
    else
      Data.Numactiverunners := 0;
    end if;
    if not Sql.Is_Null(Stm, "TOTALMATCHED") then
      Sql.Get(Stm, "TOTALMATCHED", Data.Totalmatched);
    else
      Data.Totalmatched := 0.0;
    end if;
    if not Sql.Is_Null(Stm, "TOTALAVAILABLE") then
      Sql.Get(Stm, "TOTALAVAILABLE", Data.Totalavailable);
    else
      Data.Totalavailable := 0.0;
    end if;
    if not Sql.Is_Null(Stm, "IXXLUPD") then
      Sql.Get(Stm, "IXXLUPD", Data.Ixxlupd);
    else
      Data.Ixxlupd := (others => ' ');
    end if;
    if not Sql.Is_Null(Stm, "IXXLUTS") then
      Sql.Get_Timestamp(Stm, "IXXLUTS", Data.Ixxluts);
    else
      Data.Ixxluts := Time_Type_First;
    end if;
  return Data;
  end Get;
---------------------------------------------

  function Get(Marketid : String) return Table_Amarkets.Data_Type is
    Data       : Table_Amarkets.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Read(Data, End_Of_Set);
    return Data;
  end Get;
--------------------------------------------

  procedure Read_All(List  : in out Amarkets_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_All_O, "select * from AMARKETS order by MARKETID");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Sql.Prepare(Stm_Select_All, "select * from AMARKETS");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_All;
--------------------------------------------


  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Amarkets_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Count       : Integer_4 := 0;
    Data        : Table_Amarkets.Data_Type;
    Eos         : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction  : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Open_Cursor(Stm);
    loop
      Sql.Fetch(Stm, Eos); 
      exit when Eos or Count > Max;
      Data := Get(Stm);
      Amarkets_List_Pack.Insert_At_Tail(List, Data);
      Count := Count +1;
    end loop;
    Sql.Close_Cursor(Stm);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_List;
--------------------------------------------

  function Is_Existing(Marketid : String) return Boolean is
    Data       : Table_Amarkets.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Marketid := Marketid;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;
--------------------------------------------

  procedure Read(Data       : in out Table_Amarkets.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select, " select * from AMARKETS " & 
            "where MARKETID=:MARKETID" ) ;
    Sql.Set(Stm_Select, "MARKETID", Data.Marketid);

    Sql.Open_Cursor(Stm_Select);
    Sql.Fetch(Stm_Select, End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Sql.Close_Cursor(Stm_Select);
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read;
---------------------------------------------

  procedure Delete(Data : in Table_Amarkets.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete, " delete from AMARKETS " & 
            "where MARKETID=:MARKETID" ) ;
    Sql.Set(Stm_Delete, "MARKETID", Data.Marketid);

    Sql.Execute(Stm_Delete);
  end Delete;
--------------------------------------------

  procedure Update(Data : in out Table_Amarkets.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    Sql.Prepare(Stm_Update, "update AMARKETS set " &
            "MARKETNAME=:MARKETNAME," &
            "STARTTS=:STARTTS," &
            "EVENTID=:EVENTID," &
            "MARKETTYPE=:MARKETTYPE," &
            "STATUS=:STATUS," &
            "BETDELAY=:BETDELAY," &
            "NUMWINNERS=:NUMWINNERS," &
            "NUMRUNNERS=:NUMRUNNERS," &
            "NUMACTIVERUNNERS=:NUMACTIVERUNNERS," &
            "TOTALMATCHED=:TOTALMATCHED," &
            "TOTALAVAILABLE=:TOTALAVAILABLE," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where MARKETID=:MARKETID " ) ;
    Sql.Set(Stm_Update, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Update, "MARKETNAME",Data.Marketname);
    Sql.Set_Timestamp(Stm_Update, "STARTTS",Data.Startts);
    Sql.Set(Stm_Update, "EVENTID",Data.Eventid);
    Sql.Set(Stm_Update, "MARKETTYPE",Data.Markettype);
    Sql.Set(Stm_Update, "STATUS",Data.Status);
    Sql.Set(Stm_Update, "BETDELAY",Data.Betdelay);
    Sql.Set(Stm_Update, "NUMWINNERS",Data.Numwinners);
    Sql.Set(Stm_Update, "NUMRUNNERS",Data.Numrunners);
    Sql.Set(Stm_Update, "NUMACTIVERUNNERS",Data.Numactiverunners);
    Sql.Set(Stm_Update, "TOTALMATCHED",Data.Totalmatched);
    Sql.Set(Stm_Update, "TOTALAVAILABLE",Data.Totalavailable);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update);
  end Update;
--------------------------------------------

  procedure Insert(Data : in out Table_Amarkets.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    if not Keep_Timestamp then
      null; --for tables without IXX*
    Data.Ixxluts := Now;
    end if;
    Sql.Prepare(Stm_Insert, "insert into AMARKETS values (" &
            ":MARKETID, " &
            ":MARKETNAME, " &
            ":STARTTS, " &
            ":EVENTID, " &
            ":MARKETTYPE, " &
            ":STATUS, " &
            ":BETDELAY, " &
            ":NUMWINNERS, " &
            ":NUMRUNNERS, " &
            ":NUMACTIVERUNNERS, " &
            ":TOTALMATCHED, " &
            ":TOTALAVAILABLE, " &
            ":IXXLUPD, " &
            ":IXXLUTS) " ) ;
    Sql.Set(Stm_Insert, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Insert, "MARKETNAME",Data.Marketname);
    Sql.Set_Timestamp(Stm_Insert, "STARTTS",Data.Startts);
    Sql.Set(Stm_Insert, "EVENTID",Data.Eventid);
    Sql.Set(Stm_Insert, "MARKETTYPE",Data.Markettype);
    Sql.Set(Stm_Insert, "STATUS",Data.Status);
    Sql.Set(Stm_Insert, "BETDELAY",Data.Betdelay);
    Sql.Set(Stm_Insert, "NUMWINNERS",Data.Numwinners);
    Sql.Set(Stm_Insert, "NUMRUNNERS",Data.Numrunners);
    Sql.Set(Stm_Insert, "NUMACTIVERUNNERS",Data.Numactiverunners);
    Sql.Set(Stm_Insert, "TOTALMATCHED",Data.Totalmatched);
    Sql.Set(Stm_Insert, "TOTALAVAILABLE",Data.Totalavailable);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Insert, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Insert, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Insert);
  end Insert;
--------------------------------------------

  procedure Delete_Withcheck(Data : in Table_Amarkets.Data_Type) is
  begin
    Sql.Prepare(Stm_Delete_With_Check, " delete from AMARKETS " & 
            "where MARKETID=:MARKETID" &
            " and IXXLUPD=:IXXLUPD" &
            " and IXXLUTS=:IXXLUTS" ) ;
    Sql.Set(Stm_Delete_With_Check, "MARKETID", Data.Marketid);
    Sql.Set(Stm_Delete_With_Check, "IXXLUPD", Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Delete_With_Check, "IXXLUTS", Data.Ixxluts);

    Sql.Execute(Stm_Delete_With_Check);
  end Delete_Withcheck;
--------------------------------------------

  procedure Update_Withcheck(Data : in out Table_Amarkets.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Sattmate_Calendar.Time_Type := Sattmate_Calendar.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin

    Sql.Prepare(Stm_Update_With_Check, "update AMARKETS set " &
            "MARKETNAME=:MARKETNAME," &
            "STARTTS=:STARTTS," &
            "EVENTID=:EVENTID," &
            "MARKETTYPE=:MARKETTYPE," &
            "STATUS=:STATUS," &
            "BETDELAY=:BETDELAY," &
            "NUMWINNERS=:NUMWINNERS," &
            "NUMRUNNERS=:NUMRUNNERS," &
            "NUMACTIVERUNNERS=:NUMACTIVERUNNERS," &
            "TOTALMATCHED=:TOTALMATCHED," &
            "TOTALAVAILABLE=:TOTALAVAILABLE," &
            "IXXLUPD=:IXXLUPD," &
            "IXXLUTS=:IXXLUTS " &
            "where MARKETID=:MARKETID " &
            "and IXXLUPD=:OLD_IXXLUPD " &
            "and IXXLUTS=:OLD_IXXLUTS " ) ;
    Sql.Set(Stm_Update_With_Check, "OLD_IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "OLD_IXXLUTS",Data.Ixxluts);
    if not Keep_Timestamp then
      null; --for tables without Ixx* 
      Data.Ixxluts := Now;
    end if;
    Sql.Set(Stm_Update_With_Check, "MARKETID",Data.Marketid);
    Sql.Set(Stm_Update_With_Check, "MARKETNAME",Data.Marketname);
    Sql.Set_Timestamp(Stm_Update_With_Check, "STARTTS",Data.Startts);
    Sql.Set(Stm_Update_With_Check, "EVENTID",Data.Eventid);
    Sql.Set(Stm_Update_With_Check, "MARKETTYPE",Data.Markettype);
    Sql.Set(Stm_Update_With_Check, "STATUS",Data.Status);
    Sql.Set(Stm_Update_With_Check, "BETDELAY",Data.Betdelay);
    Sql.Set(Stm_Update_With_Check, "NUMWINNERS",Data.Numwinners);
    Sql.Set(Stm_Update_With_Check, "NUMRUNNERS",Data.Numrunners);
    Sql.Set(Stm_Update_With_Check, "NUMACTIVERUNNERS",Data.Numactiverunners);
    Sql.Set(Stm_Update_With_Check, "TOTALMATCHED",Data.Totalmatched);
    Sql.Set(Stm_Update_With_Check, "TOTALAVAILABLE",Data.Totalavailable);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name;
    end if;
    Sql.Set(Stm_Update_With_Check, "IXXLUPD",Data.Ixxlupd);
    Sql.Set_Timestamp(Stm_Update_With_Check, "IXXLUTS",Data.Ixxluts);

    Sql.Execute(Stm_Update_With_Check);
  end Update_Withcheck;
--------------------------------------------

  -- Primary key, when several fields

  -- Index 

  procedure Read_Eventid(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Eventid_O, " select * from AMARKETS " & 
            "where EVENTID=:EVENTID" &
            " order by MARKETID "  ) ; 
      Sql.Set(Stm_Select_Eventid_O, "EVENTID", Data.Eventid);
 
      Read_List(Stm_Select_Eventid_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Eventid, " select * from AMARKETS " & 
            "where EVENTID=:EVENTID"  ) ; 
      Sql.Set(Stm_Select_Eventid, "EVENTID", Data.Eventid);
 
      Read_List(Stm_Select_Eventid, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Eventid;
---------------------------------------------
  procedure Read_One_Eventid(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Amarkets_List_Pack.List_Type := Amarkets_List_Pack.Create;
  begin
    Read_Eventid(Data, List, Order, 1);
    if Amarkets_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Amarkets_List_Pack.Remove_From_Head(List, Data);
    end if;
    Amarkets_List_Pack.Release(List);
    end Read_One_Eventid;
---------------------------------------------

  function Count_Eventid(Data : Table_Amarkets.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Eventid, "select count('a') from AMARKETS where EVENTID = :EVENTID ");
    Sql.Set(Stm_Select_Count_Eventid, "EVENTID", Data.Eventid);
 
    Sql.Open_Cursor(Stm_Select_Count_Eventid);
    Sql.Fetch(Stm_Select_Count_Eventid, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Eventid, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Eventid);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Eventid;
---------------------------------------------
  procedure Delete_Eventid(Data  : in     Table_Amarkets.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Eventid, " delete from AMARKETS " & 
            "where EVENTID=:EVENTID"  ) ; 
      Sql.Set(Stm_Delete_Eventid, "EVENTID", Data.Eventid);
 
    Sql.Execute(Stm_Delete_Eventid);
  end Delete_Eventid;
---------------------------------------------


  -- Index 

  procedure Read_Markettype(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Markettype_O, " select * from AMARKETS " & 
            "where MARKETTYPE=:MARKETTYPE" &
            " order by MARKETID "  ) ; 
      Sql.Set(Stm_Select_Markettype_O, "MARKETTYPE", Data.Markettype);
 
      Read_List(Stm_Select_Markettype_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Markettype, " select * from AMARKETS " & 
            "where MARKETTYPE=:MARKETTYPE"  ) ; 
      Sql.Set(Stm_Select_Markettype, "MARKETTYPE", Data.Markettype);
 
      Read_List(Stm_Select_Markettype, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Markettype;
---------------------------------------------
  procedure Read_One_Markettype(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Amarkets_List_Pack.List_Type := Amarkets_List_Pack.Create;
  begin
    Read_Markettype(Data, List, Order, 1);
    if Amarkets_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Amarkets_List_Pack.Remove_From_Head(List, Data);
    end if;
    Amarkets_List_Pack.Release(List);
    end Read_One_Markettype;
---------------------------------------------

  function Count_Markettype(Data : Table_Amarkets.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Markettype, "select count('a') from AMARKETS where MARKETTYPE = :MARKETTYPE ");
    Sql.Set(Stm_Select_Count_Markettype, "MARKETTYPE", Data.Markettype);
 
    Sql.Open_Cursor(Stm_Select_Count_Markettype);
    Sql.Fetch(Stm_Select_Count_Markettype, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Markettype, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Markettype);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Markettype;
---------------------------------------------
  procedure Delete_Markettype(Data  : in     Table_Amarkets.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Markettype, " delete from AMARKETS " & 
            "where MARKETTYPE=:MARKETTYPE"  ) ; 
      Sql.Set(Stm_Delete_Markettype, "MARKETTYPE", Data.Markettype);
 
    Sql.Execute(Stm_Delete_Markettype);
  end Delete_Markettype;
---------------------------------------------


  -- Index 

  procedure Read_Status(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Status_O, " select * from AMARKETS " & 
            "where STATUS=:STATUS" &
            " order by MARKETID "  ) ; 
      Sql.Set(Stm_Select_Status_O, "STATUS", Data.Status);
 
      Read_List(Stm_Select_Status_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Status, " select * from AMARKETS " & 
            "where STATUS=:STATUS"  ) ; 
      Sql.Set(Stm_Select_Status, "STATUS", Data.Status);
 
      Read_List(Stm_Select_Status, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Status;
---------------------------------------------
  procedure Read_One_Status(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Amarkets_List_Pack.List_Type := Amarkets_List_Pack.Create;
  begin
    Read_Status(Data, List, Order, 1);
    if Amarkets_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Amarkets_List_Pack.Remove_From_Head(List, Data);
    end if;
    Amarkets_List_Pack.Release(List);
    end Read_One_Status;
---------------------------------------------

  function Count_Status(Data : Table_Amarkets.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Status, "select count('a') from AMARKETS where STATUS = :STATUS ");
    Sql.Set(Stm_Select_Count_Status, "STATUS", Data.Status);
 
    Sql.Open_Cursor(Stm_Select_Count_Status);
    Sql.Fetch(Stm_Select_Count_Status, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Status, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Status);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Status;
---------------------------------------------
  procedure Delete_Status(Data  : in     Table_Amarkets.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Status, " delete from AMARKETS " & 
            "where STATUS=:STATUS"  ) ; 
      Sql.Set(Stm_Delete_Status, "STATUS", Data.Status);
 
    Sql.Execute(Stm_Delete_Status);
  end Delete_Status;
---------------------------------------------


  -- Index 

  procedure Read_Numwinners(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    if Order then
      Sql.Prepare(Stm_Select_Numwinners_O, " select * from AMARKETS " & 
            "where NUMWINNERS=:NUMWINNERS" &
            " order by MARKETID "  ) ; 
      Sql.Set(Stm_Select_Numwinners_O, "NUMWINNERS", Data.Numwinners);
 
      Read_List(Stm_Select_Numwinners_O, List, Max);
    else
      Sql.Prepare(Stm_Select_Numwinners, " select * from AMARKETS " & 
            "where NUMWINNERS=:NUMWINNERS"  ) ; 
      Sql.Set(Stm_Select_Numwinners, "NUMWINNERS", Data.Numwinners);
 
      Read_List(Stm_Select_Numwinners, List, Max);
    end if;
    if Start_Trans then Sql.Commit(Transaction); end if;
  end Read_Numwinners;
---------------------------------------------
  procedure Read_One_Numwinners(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean) is
    List : Amarkets_List_Pack.List_Type := Amarkets_List_Pack.Create;
  begin
    Read_Numwinners(Data, List, Order, 1);
    if Amarkets_List_Pack.Is_Empty(List) then
      End_Of_Set := True;
    else
      End_Of_Set := False;
      Amarkets_List_Pack.Remove_From_Head(List, Data);
    end if;
    Amarkets_List_Pack.Release(List);
    end Read_One_Numwinners;
---------------------------------------------

  function Count_Numwinners(Data : Table_Amarkets.Data_Type) return Integer_4 is
    use Sql;
    Count       : Integer_4 := 0;
    End_Of_Set  : Boolean := False;
    Start_Trans : constant Boolean := (Sql.Transaction_Status = Sql.None);
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Sql.Start_Read_Write_Transaction(Transaction); end if;
    Sql.Prepare(Stm_Select_Count_Numwinners, "select count('a') from AMARKETS where NUMWINNERS = :NUMWINNERS ");
    Sql.Set(Stm_Select_Count_Numwinners, "NUMWINNERS", Data.Numwinners);
 
    Sql.Open_Cursor(Stm_Select_Count_Numwinners);
    Sql.Fetch(Stm_Select_Count_Numwinners, End_Of_Set);
    if not End_Of_Set then
      Sql.Get(Stm_Select_Count_Numwinners, 1, Count);
    end if;
    Sql.Close_Cursor(Stm_Select_Count_Numwinners);
    if Start_Trans then Sql.Commit(Transaction); end if;
    return Count;
  end Count_Numwinners;
---------------------------------------------
  procedure Delete_Numwinners(Data  : in     Table_Amarkets.Data_Type) is
  begin
      Sql.Prepare(Stm_Delete_Numwinners, " delete from AMARKETS " & 
            "where NUMWINNERS=:NUMWINNERS"  ) ; 
      Sql.Set(Stm_Delete_Numwinners, "NUMWINNERS", Data.Numwinners);
 
    Sql.Execute(Stm_Delete_Numwinners);
  end Delete_Numwinners;
---------------------------------------------



  -- Procedures for all DBMS


  function Date_To_String(Date : in Sattmate_Calendar.Time_Type) return String is
    package Integer_2_Io is new Text_Io.Integer_Io(Integer_2);
    Date_String : String(1..10) := "yyyy-mm-dd";
  begin
    Integer_2_Io.Put(Date_String(9..10), Date.Day);
    Integer_2_Io.Put(Date_String(6..7), Date.Month);
    Integer_2_Io.Put(Date_String(1..4), Date.Year);
    if Date_String(9) = ' ' then Date_String(9) := '0'; end if;
    if Date_String(6) = ' ' then Date_String(6) := '0'; end if;
    return Date_String;
  end Date_To_String;
--------------------------------------------



  function To_String(Data : in Table_Amarkets.Data_Type) return String is
  begin
    return
          " Marketid = " & General_Routines.Skip_Trailing_Blanks(Data.Marketid) &
          " Marketname = " & General_Routines.Skip_Trailing_Blanks(Data.Marketname) &
          " Startts = " & Sattmate_Calendar.String_Date_And_Time(Data.Startts, Milliseconds => true) &
          " Eventid = " & General_Routines.Skip_Trailing_Blanks(Data.Eventid) &
          " Markettype = " & General_Routines.Skip_Trailing_Blanks(Data.Markettype) &
          " Status = " & General_Routines.Skip_Trailing_Blanks(Data.Status) &
          " Betdelay = " & Integer_4'Image(Data.Betdelay) &
          " Numwinners = " & Integer_4'Image(Data.Numwinners) &
          " Numrunners = " & Integer_4'Image(Data.Numrunners) &
          " Numactiverunners = " & Integer_4'Image(Data.Numactiverunners) &
          " Totalmatched = " &  General_Routines.F8_Image(Data.Totalmatched) &
          " Totalavailable = " &  General_Routines.F8_Image(Data.Totalavailable) &
          " Ixxlupd = " & General_Routines.Skip_Trailing_Blanks(Data.Ixxlupd) &
          " Ixxluts = " & Sattmate_Calendar.String_Date_And_Time(Data.Ixxluts, Milliseconds => true) &
          "";
  end To_String;
--------------------------------------------

end Table_Amarkets ;

