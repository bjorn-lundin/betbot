-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- /home/bnl/bnlbot/botstart/bot-1-1/script/tcl/make_table_package.tcl at                                       
--9.6-10510                                          
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



pragma Warnings(Off);
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Sattmate_Types, Sattmate_Calendar, Sql, Simple_List_Class;

package Table_Amarkets is

  use Sattmate_Types, Sattmate_Calendar;

  type Data_Type is record
      Marketid :    String (1..11) := (others => ' ') ; -- Primary Key
      Marketname :    String (1..50) := (others => ' ') ; --
      Startts :    Time_Type  := Time_Type_First ; --
      Eventid :    String (1..11) := (others => ' ') ; -- non unique index 2
      Markettype :    String (1..6) := (others => ' ') ; -- non unique index 3
      Status :    String (1..50) := (others => ' ') ; -- non unique index 4
      Betdelay :    Integer_4  := 0 ; --
      Numwinners :    Integer_4  := 0 ; -- non unique index 5
      Numrunners :    Integer_4  := 0 ; --
      Numactiverunners :    Integer_4  := 0 ; --
      Totalmatched :    Float_8  := 0.0 ; --
      Totalavailable :    Float_8  := 0.0 ; --
      Ixxlupd :    String (1..15) := (others => ' ') ; --
      Ixxluts :    Time_Type  := Time_Type_First ; --
  end record;
  Empty_Data : Table_Amarkets.Data_Type;
  -- 
  -- Table name as string 
  --
  Table_Amarkets_Name : constant String := "AMARKETS";
  Table_Amarkets_Set_Name : constant String := "AMARKETS_SET";
  Table_Amarkets_Row_Name : constant String := "AMARKETS_ROW";
  -- 
  -- Column names as strings 
  --
  Marketid_Name : constant String := "MARKETID";
  Marketname_Name : constant String := "MARKETNAME";
  Startts_Name : constant String := "STARTTS";
  Eventid_Name : constant String := "EVENTID";
  Markettype_Name : constant String := "MARKETTYPE";
  Status_Name : constant String := "STATUS";
  Betdelay_Name : constant String := "BETDELAY";
  Numwinners_Name : constant String := "NUMWINNERS";
  Numrunners_Name : constant String := "NUMRUNNERS";
  Numactiverunners_Name : constant String := "NUMACTIVERUNNERS";
  Totalmatched_Name : constant String := "TOTALMATCHED";
  Totalavailable_Name : constant String := "TOTALAVAILABLE";
  Ixxlupd_Name : constant String := "IXXLUPD";
  Ixxluts_Name : constant String := "IXXLUTS";
  -- 
  -- Column names as enumerator literals 
  --
  type Column_Type is (
        Marketid,
        Marketname,
        Startts,
        Eventid,
        Markettype,
        Status,
        Betdelay,
        Numwinners,
        Numrunners,
        Numactiverunners,
        Totalmatched,
        Totalavailable,
        Ixxlupd,
        Ixxluts);

  package Amarkets_List_Pack is new Simple_List_Class(Table_Amarkets.Data_Type);

  -- Procedures for DBMS DEF
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Amarkets.Data_Type;
  --------------------------------------------
  procedure Read(Data       : in out Table_Amarkets.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  function Is_Existing(Marketid : String) return Boolean;
  --------------------------------------------
  function Get(Marketid : String) return Table_Amarkets.Data_Type;
  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Amarkets_List_Pack.List_Type;
                      Max  : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Read_All(List  : in out Amarkets_List_Pack.List_Type;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------
  procedure Delete(Data : in Table_Amarkets.Data_Type);
  --------------------------------------------
  procedure Update(Data : in out Table_Amarkets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Insert(Data : in out Table_Amarkets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  procedure Delete_Withcheck(Data : in Table_Amarkets.Data_Type);
  --------------------------------------------
  procedure Update_Withcheck(Data : in out Table_Amarkets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary keys, when several fields

  -- Index 

  procedure Read_Eventid(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Eventid(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Eventid(Data : Table_Amarkets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Eventid(Data  : in     Table_Amarkets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Markettype(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Markettype(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Markettype(Data : Table_Amarkets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Markettype(Data  : in     Table_Amarkets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Status(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Status(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Status(Data : Table_Amarkets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Status(Data  : in     Table_Amarkets.Data_Type);
  --------------------------------------------

  -- Index 

  procedure Read_Numwinners(Data  : in     Table_Amarkets.Data_Type;
                       List  : in out Amarkets_List_Pack.List_Type;
                       Order : in     Boolean := False;
                       Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------

  procedure Read_One_Numwinners(Data       : in out Table_Amarkets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  function Count_Numwinners(Data : Table_Amarkets.Data_Type) return Integer_4;
  --------------------------------------------


  procedure Delete_Numwinners(Data  : in     Table_Amarkets.Data_Type);
  --------------------------------------------


  -- Procedures for all DBMS

  function To_String(Data : in Table_Amarkets.Data_Type) return String;

end Table_Amarkets ;
